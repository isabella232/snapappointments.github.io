{
    "docs": [
        {
            "location": "/",
            "text": "Getting Started\n\n\n\n\nDependencies\n\n\nRequires jQuery v1.8.0+, Bootstrap\u2019s dropdown.js component, and Bootstrap's CSS. If you're not already using Bootstrap in your project, a precompiled version of the minimum requirements can be downloaded \nhere\n.\n\n\nCDNJS\n\n\nThe folks at CDNJS host a copy of the library. The CDN is updated after the release is made public, which means there is a delay between the publishing of a release and its availability on the CDN, so keep that in mind. Just use these links:\n\n\n<!-- Latest compiled and minified CSS -->\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.0-alpha/css/bootstrap-select.min.css\">\n\n<!-- Latest compiled and minified JavaScript -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.0-alpha/js/bootstrap-select.min.js\"></script>\n\n<!-- (Optional) Latest compiled and minified JavaScript translation files -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.0-alpha/js/i18n/defaults-*.min.js\"></script>\n\n\n\n\nInstall with npm\n\n\nYou can also install bootstrap-select using \nnpm\n:\n\n\n$ npm install bootstrap-select\n\n\n\n\nInstall with NuGet\n\n\nYou can also install bootstrap-select using \nNuGet\n:\n\n\n$ Install-Package bootstrap-select\n\n\n\n\nUsage\n\n\n\n\nCreate your \n<select>\n with the \n.selectpicker\n class. The data-api will automatically theme these elements.\n\n\n<select class=\"selectpicker\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>\n\n\n\n\nOptions can be passed via data attributes or JavaScript.\n\n\n$('.selectpicker').selectpicker({\n  style: 'btn-info',\n  size: 4\n});",
            "title": "Bootstrap-select"
        },
        {
            "location": "/#getting-started",
            "text": "",
            "title": "Getting Started"
        },
        {
            "location": "/#dependencies",
            "text": "Requires jQuery v1.8.0+, Bootstrap\u2019s dropdown.js component, and Bootstrap's CSS. If you're not already using Bootstrap in your project, a precompiled version of the minimum requirements can be downloaded  here .",
            "title": "Dependencies"
        },
        {
            "location": "/#cdnjs",
            "text": "The folks at CDNJS host a copy of the library. The CDN is updated after the release is made public, which means there is a delay between the publishing of a release and its availability on the CDN, so keep that in mind. Just use these links:  <!-- Latest compiled and minified CSS -->\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.0-alpha/css/bootstrap-select.min.css\">\n\n<!-- Latest compiled and minified JavaScript -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.0-alpha/js/bootstrap-select.min.js\"></script>\n\n<!-- (Optional) Latest compiled and minified JavaScript translation files -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.0-alpha/js/i18n/defaults-*.min.js\"></script>",
            "title": "CDNJS"
        },
        {
            "location": "/#install-with-npm",
            "text": "You can also install bootstrap-select using  npm :  $ npm install bootstrap-select",
            "title": "Install with npm"
        },
        {
            "location": "/#install-with-nuget",
            "text": "You can also install bootstrap-select using  NuGet :  $ Install-Package bootstrap-select",
            "title": "Install with NuGet"
        },
        {
            "location": "/#usage",
            "text": "Create your  <select>  with the  .selectpicker  class. The data-api will automatically theme these elements.  <select class=\"selectpicker\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>  Options can be passed via data attributes or JavaScript.  $('.selectpicker').selectpicker({\n  style: 'btn-info',\n  size: 4\n});",
            "title": "Usage"
        },
        {
            "location": "/examples/",
            "text": "Basic examples\n\n\n\n\nStandard select boxes\n\n\n\n  \nMake this:\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n  \n\n\n  \nBecome this:\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n  \n\n\n\n\n\n<select class=\"selectpicker\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>\n\n\n\n\n\n\n\nSelect boxes with optgroups\n\n\n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n    \n\n    \n\n      \nTent\n\n      \nFlashlight\n\n      \nToilet Paper\n\n    \n\n  \n\n\n\n\n\n<select class=\"selectpicker\">\n  <optgroup label=\"Picnic\">\n    <option>Mustard</option>\n    <option>Ketchup</option>\n    <option>Relish</option>\n  </optgroup>\n  <optgroup label=\"Camping\">\n    <option>Tent</option>\n    <option>Flashlight</option>\n    <option>Toilet Paper</option>\n  </optgroup>\n</select>\n\n\n\n\nMultiple select boxes\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n  \n\n\n\n\n\n<select class=\"selectpicker\" multiple>\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>\n\n\n\n\nLive search\n\n\n\n\nLive search\n\n\nYou can add a search input by passing \ndata-live-search=\"true\"\n attribute:\n\n\n\n  \n\n    \nHot Dog, Fries and a Soda\n\n    \nBurger, Shake and a Smile\n\n    \nSugar, Spice and all things nice\n\n  \n\n\n\n\n\nKey words\n\n\nAdd key words to options to improve their searchability using \ndata-tokens\n.\n\n\n\n  \n\n    \nHot Dog, Fries and a Soda\n\n    \nBurger, Shake and a Smile\n\n    \nSugar, Spice and all things nice\n\n  \n\n\n\n\n\n<select class=\"selectpicker\" data-live-search=\"true\">\n  <option data-tokens=\"ketchup mustard\">Hot Dog, Fries and a Soda</option>\n  <option data-tokens=\"mustard\">Burger, Shake and a Smile</option>\n  <option data-tokens=\"frosting\">Sugar, Spice and all things nice</option>\n</select>\n\n\n\n\nLimit the number of selections\n\n\nLimit the number of options that can be selected via the \ndata-max-options\n attribute. It also works for option groups. Customize the message displayed when the limit is reached with \nmaxOptionsText\n.\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n  \n\n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n    \n\n    \n\n      \nPlain\n\n      \nSteamed\n\n      \nToasted\n\n    \n\n  \n\n\n\n\n\n<select class=\"selectpicker\" multiple data-max-options=\"2\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>\n\n<select class=\"selectpicker\" multiple>\n  <optgroup label=\"Condiments\" data-max-options=\"2\">\n    <option>Mustard</option>\n    <option>Ketchup</option>\n    <option>Relish</option>\n  </optgroup>\n  <optgroup label=\"Breads\" data-max-options=\"2\">\n    <option>Plain</option>\n    <option>Steamed</option>\n    <option>Toasted</option>\n  </optgroup>\n</select>\n\n\n\n\nCustom button text\n\n\n\n\nPlaceholder\n\n\n\nUsing the \ntitle\n attribute will set the default placeholder text when nothing is selected. This works for both multiple and standard select boxes:\n\n\n\n  \n\n    \nMultiple\n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n    \n\n  \n\n\n  \n\n    \nStandard\n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n    \n\n  \n\n\n\n\n\n<select class=\"selectpicker\" multiple title=\"Choose one of the following...\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>\n\n\n\n\nSelected text\n\n\n\n\n\nSet the \ntitle\n attribute on individual options to display alternative text when the option is selected:\n\n\n\n  \n\n    \nHot Dog, Fries and a Soda\n\n    \nBurger, Shake and a Smile\n\n    \nSugar, Spice and all things nice\n\n  \n\n\n\n\n\n<select class=\"selectpicker\">\n  <option title=\"Combo 1\">Hot Dog, Fries and a Soda</option>\n  <option title=\"Combo 2\">Burger, Shake and a Smile</option>\n  <option title=\"Combo 3\">Sugar, Spice and all things nice</option>\n</select>\n\n\n\n\nSelected text format\n\n\n\n\n\nSpecify how the selection is displayed with the \ndata-selected-text-format\n attribute on a multiple select.\n\n\nThe supported values are:\n\n\n\n\nvalues\n: A comma delimited list of selected values (default)\n\n\ncount\n: If one item is selected, then the option value is shown. If more than one is selected then the number of selected items is displayed, e.g. \n2 of 6 selected\n\n\ncount > x\n: Where \nx\n is the number of items selected when the display format changes from \nvalues\n to \ncount\n\n\nstatic\n: Always show the select title (placeholder), regardless of selection\n\n\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n  \n\n\n\n\n\n<select class=\"selectpicker\" multiple data-selected-text-format=\"count\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>\n\n\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n    \nOnions\n\n  \n\n\n\n\n\n<select class=\"selectpicker\" multiple data-selected-text-format=\"count > 3\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n  <option>Onions</option>\n</select>\n\n\n\n\nStyling\n\n\n\n\nButton classes\n\n\nYou can set the button classes via the \ndata-style\n attribute:\n\n\n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n    \n\n  \n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n    \n\n  \n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n    \n\n  \n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n    \n\n  \n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n    \n\n  \n\n\n\n\n\n<select class=\"selectpicker\" data-style=\"btn-primary\">\n  ...\n</select>\n\n<select class=\"selectpicker\" data-style=\"btn-info\">\n  ...\n</select>\n\n<select class=\"selectpicker\" data-style=\"btn-success\">\n  ...\n</select>\n\n<select class=\"selectpicker\" data-style=\"btn-warning\">\n  ...\n</select>\n\n<select class=\"selectpicker\" data-style=\"btn-danger\">\n  ...\n</select>\n\n\n\n\nCheckmark on selected option\n\n\nYou can also show the checkmark icon on standard select boxes with the \nshow-tick\n class:\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n  \n\n\n\n\n\n<select class=\"selectpicker show-tick\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>\n\n\n\n\nMenu arrow\n\n\nThe Bootstrap menu arrow can be added with the \nshow-menu-arrow\n class:\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n  \n\n\n\n\n\n<select class=\"selectpicker show-menu-arrow\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>\n\n\n\n\nStyle individual options\n\n\n\n\n\nClasses and styles added to options are transferred to the select box:\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n  \n\n\n\n\n\n<select class=\"selectpicker\">\n  <option>Mustard</option>\n  <option class=\"special\">Ketchup</option>\n  <option style=\"background: #5cb85c; color: #fff;\">Relish</option>\n</select>\n\n\n\n\n.special {\n  font-weight: bold !important;\n  color: #fff !important;\n  background: #bc0000 !important;\n  text-transform: uppercase;\n}\n\n\n\n\nWidth\n\n\n\n\n\nWrap selects in grid columns, or any custom parent element, to easily enforce desired widths.\n\n\n\n  \n\n    \n\n      \n\n        \n\n          \nMustard\n\n          \nKetchup\n\n          \nRelish\n\n        \n\n      \n\n    \n\n    \n\n      \n\n        \n\n          \nMustard\n\n          \nKetchup\n\n          \nRelish\n\n        \n\n      \n\n    \n\n  \n\n  \n\n    \n\n       \n\n        \n\n          \nMustard\n\n          \nKetchup\n\n          \nRelish\n\n        \n\n      \n\n    \n\n    \n\n       \n\n        \n\n          \nMustard\n\n          \nKetchup\n\n          \nRelish\n\n        \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \n\n          \nMustard\n\n          \nKetchup\n\n          \nRelish\n\n        \n\n      \n\n    \n\n    \n\n      \n\n        \n\n          \nMustard\n\n          \nKetchup\n\n          \nRelish\n\n        \n\n      \n\n    \n\n  \n\n\n\n\n\n<div class=\"row\">\n  <div class=\"col-xs-3\">\n    <div class=\"form-group\">\n      <select class=\"selectpicker form-control\">\n        <option>Mustard</option>\n        <option>Ketchup</option>\n        <option>Relish</option>\n      </select>\n    </div>\n  </div>\n</div>\n\n\n\n\n\n\n\nAlternatively, use the \ndata-width\n attribute to set the width of the select. Set \ndata-width\n to \n'auto'\n to automatically adjust the width of the select to its widest option. \n'fit'\n automatically adjusts the width of the select to the width of its currently selected option. An exact value can also be specified, e.g., \n300px\n or \n50%\n.\n\n\n\n  \n\n    \n\n      \n\n        \nwidth: 'auto'\n\n        \n\n          \nMustard\n\n          \nKetchup\n\n          \nRelish\n\n          \nAll of the above (and much, much more!)\n\n        \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \nwidth: 'fit'\n\n        \n\n          \nMustard\n\n          \nKetchup\n\n          \nRelish\n\n          \nAll of the above (and much, much more!)\n\n        \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \nwidth: '100px'\n\n        \n\n          \nMustard\n\n          \nKetchup\n\n          \nRelish\n\n          \nAll of the above (and much, much more!)\n\n        \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \nwidth: '75%'\n\n        \n\n          \nMustard\n\n          \nKetchup\n\n          \nRelish\n\n          \nAll of the above (and much, much more!)\n\n        \n\n      \n\n    \n\n  \n\n\n\n\n\n<select class=\"selectpicker\" data-width=\"auto\">\n  ...\n</select>\n<select class=\"selectpicker\" data-width=\"fit\">\n  ...\n</select>\n<select class=\"selectpicker\" data-width=\"100px\">\n  ...\n</select>\n<select class=\"selectpicker\" data-width=\"75%\">\n  ...\n</select>\n\n\n\n\nCustomize options\n\n\n\n\nIcons\n\n\nAdd an icon to an option or optgroup with the \ndata-icon\n attribute:\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n    \nMayonnaise\n\n    \nBarbecue Sauce\n\n  \n\n\n\n\n\n<select class=\"selectpicker\">\n  <option data-icon=\"glyphicon-heart\">Ketchup</option>\n</select>\n\n\n\n\nCustom content\n\n\nInsert custom HTML into the option with the \ndata-content\n attribute:\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n    \nMayonnaise\n\n  \n\n\n\n\n\n<select class=\"selectpicker\">\n  <option data-content=\"<span class='label label-success'>Relish</span>\">Relish</option>\n</select>\n\n\n\n\nSubtext\n\n\nAdd subtext to an option or optgroup with the \ndata-subtext\n attribute:\n\n\n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n      \nMayonnaise\n\n      \n\n      \nBarbecue Sauce\n\n      \nSalad Dressing\n\n      \nTabasco\n\n      \nSalsa\n\n    \n\n  \n\n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n      \nMayonnaise\n\n      \n\n      \nBarbecue Sauce\n\n      \nSalad Dressing\n\n      \nTabasco\n\n      \nSalsa\n\n    \n\n    \nWith \nshowSubtext\n set to true.\n\n  \n\n\n\n\n\n<select class=\"selectpicker\" data-size=\"5\">\n  <option data-subtext=\"Heinz\">Ketchup</option>\n</select>\n\n\n\n\nCustomize menu\n\n\n\n\nMenu size\n\n\nThe \nsize\n option is set to \n'auto'\n by default. When \nsize\n is set to \n'auto'\n, the menu always opens up to show as many items as the window will allow without being cut off. Set \nsize\n to \nfalse\n to always show all items. The size of the menu can also be specifed using the \ndata-size\n attribute.\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n    \nMayonnaise\n\n    \nBarbecue Sauce\n\n    \nSalad Dressing\n\n    \nTabasco\n\n    \nSalsa\n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n    \nMayonnaise\n\n    \nBarbecue Sauce\n\n    \nSalad Dressing\n\n    \nTabasco\n\n    \nSalsa\n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n    \nMayonnaise\n\n    \nBarbecue Sauce\n\n    \nSalad Dressing\n\n    \nTabasco\n\n    \nSalsa\n\n  \n\n\n\n\n\n\n\n\nSpecify a number for \ndata-size\n to choose the maximum number of items to show in the menu.\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n    \nMayonnaise\n\n    \nBarbecue Sauce\n\n    \nSalad Dressing\n\n    \nTabasco\n\n    \nSalsa\n\n  \n\n\n\n\n\n<select class=\"selectpicker\" data-size=\"5\">\n  ...\n</select>\n\n\n\n\nSelect/deselect all options\n\n\nAdds two buttons to the top of the menu - \nSelect All\n & \nDeselect All\n with \ndata-actions-box=\"true\"\n.\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n  \n\n\n\n\n\n<select class=\"selectpicker\" multiple data-actions-box=\"true\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>\n\n\n\n\nDivider\n\n\nAdd \ndata-divider=\"true\"\n to an option to turn it into a divider.\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n    \nMayonnaise\n\n    \n\n    \nBarbecue Sauce\n\n    \nSalad Dressing\n\n    \nTabasco\n\n    \nSalsa\n\n  \n\n\n\n\n\n<select class=\"selectpicker\" data-size=\"5\">\n  <option data-divider=\"true\"></option>\n</select>\n\n\n\n\nMenu header\n\n\nAdd a header to the dropdown menu, e.g. \nheader: 'Select a condiment'\n or \ndata-header=\"Select a condiment\"\n\n\n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n      \nMayonnaise\n\n      \n\n      \nBarbecue Sauce\n\n      \nSalad Dressing\n\n      \nTabasco\n\n      \nSalsa\n\n    \n\n  \n\n\n\n\n\n<select class=\"selectpicker\" data-header=\"Select a condiment\">\n  ...\n</select>\n\n\n\n\nContainer\n\n\nAppend the select to a specific element, e.g. \ncontainer: 'body'\n or \ndata-container=\".main-content\"\n\n\n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n      \nMayonnaise\n\n      \n\n      \nBarbecue Sauce\n\n      \nSalad Dressing\n\n      \nTabasco\n\n      \nSalsa\n\n    \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n      \nMayonnaise\n\n      \n\n      \nBarbecue Sauce\n\n      \nSalad Dressing\n\n      \nTabasco\n\n      \nSalsa\n\n    \n\n  \n\n\n\n\n\n<div style=\"overflow:hidden;\">\n  <select class=\"selectpicker\">\n    ...\n  </select>\n  <select class=\"selectpicker\" data-container=\"body\">\n    ...\n  </select>\n</div>\n\n\n\n\nDropup menu\n\n\ndropupAuto\n is set to true by default, which automatically determines whether or not the menu should display above or below the select box. If \ndropupAuto\n is set to false, manually make the select a dropup menu by adding the \n.dropup\n class to the select.\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n  \n\n\n\n\n\n<select class=\"selectpicker dropup\">\n  ...\n</select>\n\n\n\n\nDisabled\n\n\n\n\nDisabled select box\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n  \n\n\n\n\n\n<select class=\"selectpicker\" disabled>\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>\n\n\n\n\nDisabled options\n\n\n\n  \n\n    \nMustard\n\n    \nKetchup\n\n    \nRelish\n\n  \n\n\n\n\n\n<select class=\"selectpicker\">\n  <option>Mustard</option>\n  <option disabled>Ketchup</option>\n  <option>Relish</option>\n</select>\n\n\n\n\nDisabled option groups\n\n\n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n    \n\n    \n\n      \nTent\n\n      \nFlashlight\n\n      \nToilet Paper\n\n    \n\n  \n\n\n\n\n\n<select class=\"selectpicker test\">\n  <optgroup label=\"Picnic\" disabled>\n    <option>Mustard</option>\n    <option>Ketchup</option>\n    <option>Relish</option>\n  </optgroup>\n  <optgroup label=\"Camping\">\n    <option>Tent</option>\n    <option>Flashlight</option>\n    <option>Toilet Paper</option>\n  </optgroup>\n</select>",
            "title": "Examples"
        },
        {
            "location": "/examples/#basic-examples",
            "text": "",
            "title": "Basic examples"
        },
        {
            "location": "/examples/#standard-select-boxes",
            "text": "Make this: \n\n   \n     Mustard \n     Ketchup \n     Relish \n   \n\n   Become this: \n\n   \n     Mustard \n     Ketchup \n     Relish \n     <select class=\"selectpicker\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>",
            "title": "Standard select boxes"
        },
        {
            "location": "/examples/#select-boxes-with-optgroups",
            "text": "Mustard \n       Ketchup \n       Relish \n     \n     \n       Tent \n       Flashlight \n       Toilet Paper \n     \n     <select class=\"selectpicker\">\n  <optgroup label=\"Picnic\">\n    <option>Mustard</option>\n    <option>Ketchup</option>\n    <option>Relish</option>\n  </optgroup>\n  <optgroup label=\"Camping\">\n    <option>Tent</option>\n    <option>Flashlight</option>\n    <option>Toilet Paper</option>\n  </optgroup>\n</select>",
            "title": "Select boxes with optgroups"
        },
        {
            "location": "/examples/#multiple-select-boxes",
            "text": "Mustard \n     Ketchup \n     Relish \n     <select class=\"selectpicker\" multiple>\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>",
            "title": "Multiple select boxes"
        },
        {
            "location": "/examples/#live-search",
            "text": "",
            "title": "Live search"
        },
        {
            "location": "/examples/#live-search_1",
            "text": "You can add a search input by passing  data-live-search=\"true\"  attribute:  \n   \n     Hot Dog, Fries and a Soda \n     Burger, Shake and a Smile \n     Sugar, Spice and all things nice",
            "title": "Live search"
        },
        {
            "location": "/examples/#key-words",
            "text": "Add key words to options to improve their searchability using  data-tokens .  \n   \n     Hot Dog, Fries and a Soda \n     Burger, Shake and a Smile \n     Sugar, Spice and all things nice \n     <select class=\"selectpicker\" data-live-search=\"true\">\n  <option data-tokens=\"ketchup mustard\">Hot Dog, Fries and a Soda</option>\n  <option data-tokens=\"mustard\">Burger, Shake and a Smile</option>\n  <option data-tokens=\"frosting\">Sugar, Spice and all things nice</option>\n</select>",
            "title": "Key words"
        },
        {
            "location": "/examples/#limit-the-number-of-selections",
            "text": "Limit the number of options that can be selected via the  data-max-options  attribute. It also works for option groups. Customize the message displayed when the limit is reached with  maxOptionsText .  \n   \n     Mustard \n     Ketchup \n     Relish \n   \n\n   \n     \n       Mustard \n       Ketchup \n       Relish \n     \n     \n       Plain \n       Steamed \n       Toasted \n     \n     <select class=\"selectpicker\" multiple data-max-options=\"2\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>\n\n<select class=\"selectpicker\" multiple>\n  <optgroup label=\"Condiments\" data-max-options=\"2\">\n    <option>Mustard</option>\n    <option>Ketchup</option>\n    <option>Relish</option>\n  </optgroup>\n  <optgroup label=\"Breads\" data-max-options=\"2\">\n    <option>Plain</option>\n    <option>Steamed</option>\n    <option>Toasted</option>\n  </optgroup>\n</select>",
            "title": "Limit the number of selections"
        },
        {
            "location": "/examples/#custom-button-text",
            "text": "",
            "title": "Custom button text"
        },
        {
            "location": "/examples/#placeholder",
            "text": "Using the  title  attribute will set the default placeholder text when nothing is selected. This works for both multiple and standard select boxes:  \n   \n     Multiple \n     \n       Mustard \n       Ketchup \n       Relish \n     \n   \n\n   \n     Standard \n     \n       Mustard \n       Ketchup \n       Relish \n     \n     <select class=\"selectpicker\" multiple title=\"Choose one of the following...\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>",
            "title": "Placeholder"
        },
        {
            "location": "/examples/#selected-text",
            "text": "Set the  title  attribute on individual options to display alternative text when the option is selected:  \n   \n     Hot Dog, Fries and a Soda \n     Burger, Shake and a Smile \n     Sugar, Spice and all things nice \n     <select class=\"selectpicker\">\n  <option title=\"Combo 1\">Hot Dog, Fries and a Soda</option>\n  <option title=\"Combo 2\">Burger, Shake and a Smile</option>\n  <option title=\"Combo 3\">Sugar, Spice and all things nice</option>\n</select>",
            "title": "Selected text"
        },
        {
            "location": "/examples/#selected-text-format",
            "text": "Specify how the selection is displayed with the  data-selected-text-format  attribute on a multiple select.  The supported values are:   values : A comma delimited list of selected values (default)  count : If one item is selected, then the option value is shown. If more than one is selected then the number of selected items is displayed, e.g.  2 of 6 selected  count > x : Where  x  is the number of items selected when the display format changes from  values  to  count  static : Always show the select title (placeholder), regardless of selection   \n   \n     Mustard \n     Ketchup \n     Relish \n     <select class=\"selectpicker\" multiple data-selected-text-format=\"count\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>  \n   \n     Mustard \n     Ketchup \n     Relish \n     Onions \n     <select class=\"selectpicker\" multiple data-selected-text-format=\"count > 3\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n  <option>Onions</option>\n</select>",
            "title": "Selected text format"
        },
        {
            "location": "/examples/#styling",
            "text": "",
            "title": "Styling"
        },
        {
            "location": "/examples/#button-classes",
            "text": "You can set the button classes via the  data-style  attribute:  \n   \n     \n       Mustard \n       Ketchup \n       Relish \n     \n   \n   \n     \n       Mustard \n       Ketchup \n       Relish \n     \n   \n   \n     \n       Mustard \n       Ketchup \n       Relish \n     \n   \n   \n     \n       Mustard \n       Ketchup \n       Relish \n     \n   \n   \n     \n       Mustard \n       Ketchup \n       Relish \n     \n     <select class=\"selectpicker\" data-style=\"btn-primary\">\n  ...\n</select>\n\n<select class=\"selectpicker\" data-style=\"btn-info\">\n  ...\n</select>\n\n<select class=\"selectpicker\" data-style=\"btn-success\">\n  ...\n</select>\n\n<select class=\"selectpicker\" data-style=\"btn-warning\">\n  ...\n</select>\n\n<select class=\"selectpicker\" data-style=\"btn-danger\">\n  ...\n</select>",
            "title": "Button classes"
        },
        {
            "location": "/examples/#checkmark-on-selected-option",
            "text": "You can also show the checkmark icon on standard select boxes with the  show-tick  class:  \n   \n     Mustard \n     Ketchup \n     Relish \n     <select class=\"selectpicker show-tick\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>",
            "title": "Checkmark on selected option"
        },
        {
            "location": "/examples/#menu-arrow",
            "text": "The Bootstrap menu arrow can be added with the  show-menu-arrow  class:  \n   \n     Mustard \n     Ketchup \n     Relish \n     <select class=\"selectpicker show-menu-arrow\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>",
            "title": "Menu arrow"
        },
        {
            "location": "/examples/#style-individual-options",
            "text": "Classes and styles added to options are transferred to the select box:  \n   \n     Mustard \n     Ketchup \n     Relish \n     <select class=\"selectpicker\">\n  <option>Mustard</option>\n  <option class=\"special\">Ketchup</option>\n  <option style=\"background: #5cb85c; color: #fff;\">Relish</option>\n</select>  .special {\n  font-weight: bold !important;\n  color: #fff !important;\n  background: #bc0000 !important;\n  text-transform: uppercase;\n}",
            "title": "Style individual options"
        },
        {
            "location": "/examples/#width",
            "text": "Wrap selects in grid columns, or any custom parent element, to easily enforce desired widths.  \n   \n     \n       \n         \n           Mustard \n           Ketchup \n           Relish \n         \n       \n     \n     \n       \n         \n           Mustard \n           Ketchup \n           Relish \n         \n       \n     \n   \n   \n     \n        \n         \n           Mustard \n           Ketchup \n           Relish \n         \n       \n     \n     \n        \n         \n           Mustard \n           Ketchup \n           Relish \n         \n       \n     \n   \n   \n     \n       \n         \n           Mustard \n           Ketchup \n           Relish \n         \n       \n     \n     \n       \n         \n           Mustard \n           Ketchup \n           Relish \n         \n       \n     \n     <div class=\"row\">\n  <div class=\"col-xs-3\">\n    <div class=\"form-group\">\n      <select class=\"selectpicker form-control\">\n        <option>Mustard</option>\n        <option>Ketchup</option>\n        <option>Relish</option>\n      </select>\n    </div>\n  </div>\n</div>   Alternatively, use the  data-width  attribute to set the width of the select. Set  data-width  to  'auto'  to automatically adjust the width of the select to its widest option.  'fit'  automatically adjusts the width of the select to the width of its currently selected option. An exact value can also be specified, e.g.,  300px  or  50% .  \n   \n     \n       \n         width: 'auto' \n         \n           Mustard \n           Ketchup \n           Relish \n           All of the above (and much, much more!) \n         \n       \n     \n   \n   \n     \n       \n         width: 'fit' \n         \n           Mustard \n           Ketchup \n           Relish \n           All of the above (and much, much more!) \n         \n       \n     \n   \n   \n     \n       \n         width: '100px' \n         \n           Mustard \n           Ketchup \n           Relish \n           All of the above (and much, much more!) \n         \n       \n     \n   \n   \n     \n       \n         width: '75%' \n         \n           Mustard \n           Ketchup \n           Relish \n           All of the above (and much, much more!) \n         \n       \n     \n     <select class=\"selectpicker\" data-width=\"auto\">\n  ...\n</select>\n<select class=\"selectpicker\" data-width=\"fit\">\n  ...\n</select>\n<select class=\"selectpicker\" data-width=\"100px\">\n  ...\n</select>\n<select class=\"selectpicker\" data-width=\"75%\">\n  ...\n</select>",
            "title": "Width"
        },
        {
            "location": "/examples/#customize-options",
            "text": "",
            "title": "Customize options"
        },
        {
            "location": "/examples/#icons",
            "text": "Add an icon to an option or optgroup with the  data-icon  attribute:  \n   \n     Mustard \n     Ketchup \n     Relish \n     Mayonnaise \n     Barbecue Sauce \n     <select class=\"selectpicker\">\n  <option data-icon=\"glyphicon-heart\">Ketchup</option>\n</select>",
            "title": "Icons"
        },
        {
            "location": "/examples/#custom-content",
            "text": "Insert custom HTML into the option with the  data-content  attribute:  \n   \n     Mustard \n     Ketchup \n     Relish \n     Mayonnaise \n     <select class=\"selectpicker\">\n  <option data-content=\"<span class='label label-success'>Relish</span>\">Relish</option>\n</select>",
            "title": "Custom content"
        },
        {
            "location": "/examples/#subtext",
            "text": "Add subtext to an option or optgroup with the  data-subtext  attribute:  \n   \n     \n       Mustard \n       Ketchup \n       Relish \n       Mayonnaise \n       \n       Barbecue Sauce \n       Salad Dressing \n       Tabasco \n       Salsa \n     \n   \n\n   \n     \n       Mustard \n       Ketchup \n       Relish \n       Mayonnaise \n       \n       Barbecue Sauce \n       Salad Dressing \n       Tabasco \n       Salsa \n     \n     With  showSubtext  set to true. \n     <select class=\"selectpicker\" data-size=\"5\">\n  <option data-subtext=\"Heinz\">Ketchup</option>\n</select>",
            "title": "Subtext"
        },
        {
            "location": "/examples/#customize-menu",
            "text": "",
            "title": "Customize menu"
        },
        {
            "location": "/examples/#menu-size",
            "text": "The  size  option is set to  'auto'  by default. When  size  is set to  'auto' , the menu always opens up to show as many items as the window will allow without being cut off. Set  size  to  false  to always show all items. The size of the menu can also be specifed using the  data-size  attribute.  \n   \n     Mustard \n     Ketchup \n     Relish \n     Mayonnaise \n     Barbecue Sauce \n     Salad Dressing \n     Tabasco \n     Salsa \n     Mustard \n     Ketchup \n     Relish \n     Mayonnaise \n     Barbecue Sauce \n     Salad Dressing \n     Tabasco \n     Salsa \n     Mustard \n     Ketchup \n     Relish \n     Mayonnaise \n     Barbecue Sauce \n     Salad Dressing \n     Tabasco \n     Salsa \n      Specify a number for  data-size  to choose the maximum number of items to show in the menu.  \n   \n     Mustard \n     Ketchup \n     Relish \n     Mayonnaise \n     Barbecue Sauce \n     Salad Dressing \n     Tabasco \n     Salsa \n     <select class=\"selectpicker\" data-size=\"5\">\n  ...\n</select>",
            "title": "Menu size"
        },
        {
            "location": "/examples/#selectdeselect-all-options",
            "text": "Adds two buttons to the top of the menu -  Select All  &  Deselect All  with  data-actions-box=\"true\" .  \n   \n     Mustard \n     Ketchup \n     Relish \n     <select class=\"selectpicker\" multiple data-actions-box=\"true\">\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>",
            "title": "Select/deselect all options"
        },
        {
            "location": "/examples/#divider",
            "text": "Add  data-divider=\"true\"  to an option to turn it into a divider.  \n   \n     Mustard \n     Ketchup \n     Relish \n     Mayonnaise \n     \n     Barbecue Sauce \n     Salad Dressing \n     Tabasco \n     Salsa \n     <select class=\"selectpicker\" data-size=\"5\">\n  <option data-divider=\"true\"></option>\n</select>",
            "title": "Divider"
        },
        {
            "location": "/examples/#menu-header",
            "text": "Add a header to the dropdown menu, e.g.  header: 'Select a condiment'  or  data-header=\"Select a condiment\"  \n   \n     \n       Mustard \n       Ketchup \n       Relish \n       Mayonnaise \n       \n       Barbecue Sauce \n       Salad Dressing \n       Tabasco \n       Salsa \n     \n     <select class=\"selectpicker\" data-header=\"Select a condiment\">\n  ...\n</select>",
            "title": "Menu header"
        },
        {
            "location": "/examples/#container",
            "text": "Append the select to a specific element, e.g.  container: 'body'  or  data-container=\".main-content\"  \n   \n     \n       Mustard \n       Ketchup \n       Relish \n       Mayonnaise \n       \n       Barbecue Sauce \n       Salad Dressing \n       Tabasco \n       Salsa \n     \n     \n       Mustard \n       Ketchup \n       Relish \n       Mayonnaise \n       \n       Barbecue Sauce \n       Salad Dressing \n       Tabasco \n       Salsa \n     \n     <div style=\"overflow:hidden;\">\n  <select class=\"selectpicker\">\n    ...\n  </select>\n  <select class=\"selectpicker\" data-container=\"body\">\n    ...\n  </select>\n</div>",
            "title": "Container"
        },
        {
            "location": "/examples/#dropup-menu",
            "text": "dropupAuto  is set to true by default, which automatically determines whether or not the menu should display above or below the select box. If  dropupAuto  is set to false, manually make the select a dropup menu by adding the  .dropup  class to the select.  \n   \n     Mustard \n     Ketchup \n     Relish \n     <select class=\"selectpicker dropup\">\n  ...\n</select>",
            "title": "Dropup menu"
        },
        {
            "location": "/examples/#disabled",
            "text": "",
            "title": "Disabled"
        },
        {
            "location": "/examples/#disabled-select-box",
            "text": "Mustard \n     Ketchup \n     Relish \n     <select class=\"selectpicker\" disabled>\n  <option>Mustard</option>\n  <option>Ketchup</option>\n  <option>Relish</option>\n</select>",
            "title": "Disabled select box"
        },
        {
            "location": "/examples/#disabled-options",
            "text": "Mustard \n     Ketchup \n     Relish \n     <select class=\"selectpicker\">\n  <option>Mustard</option>\n  <option disabled>Ketchup</option>\n  <option>Relish</option>\n</select>",
            "title": "Disabled options"
        },
        {
            "location": "/examples/#disabled-option-groups",
            "text": "Mustard \n       Ketchup \n       Relish \n     \n     \n       Tent \n       Flashlight \n       Toilet Paper \n     \n     <select class=\"selectpicker test\">\n  <optgroup label=\"Picnic\" disabled>\n    <option>Mustard</option>\n    <option>Ketchup</option>\n    <option>Relish</option>\n  </optgroup>\n  <optgroup label=\"Camping\">\n    <option>Tent</option>\n    <option>Flashlight</option>\n    <option>Toilet Paper</option>\n  </optgroup>\n</select>",
            "title": "Disabled option groups"
        },
        {
            "location": "/options/",
            "text": "Core options\n\n\n\n\nOptions can be passed via data attributes or JavaScript. For data attributes, append the option name to \ndata-\n, as in \n\ndata-style=\"\"\n or \ndata-selected-text-format=\"count\"\n.\n\n\n\n  \n\n  \n\n    \nName\n\n    \nType\n\n    \nDefault\n\n    \nDescription\n\n  \n\n  \n\n  \n\n  \n\n    \nactionsBox\n\n    \nboolean\n\n    \nfalse\n\n    \n\n      \nWhen set to \ntrue\n, adds two buttons to the top of the dropdown menu (\nSelect All\n & \nDeselect All\n).\n\n    \n\n  \n\n  \n\n    \ncontainer\n\n    \nstring | false\n\n    \nfalse\n\n    \n\n        \nWhen set to a string, appends the select to a specific element or selector, e.g., \ncontainer: 'body' | '.main-body'\n\n    \n\n  \n\n  \n\n    \ncountSelectedText\n\n    \nstring | function\n\n    \nfunction\n\n    \n\n      \nSets the format for the text displayed when selectedTextFormat is \ncount\n or \ncount > #\n. {0} is the selected amount. {1} is total available for selection.\n\n      \nWhen set to a function, the first parameter is the number of selected options, and the second is the total number of \n      options. The function must return a string.\n\n    \n\n  \n\n  \n\n    \ndeselectAllText\n\n    \nstring\n\n    \n'Deselect All'\n\n    \n\n      \nThe text on the button that deselects all options when \nactionsBox\n is enabled.\n\n    \n\n  \n\n  \n\n    \ndropdownAlignRight\n\n    \nboolean | \n'auto'\n\n    \nfalse\n\n    \n\n      \nAlign the menu to the right instead of the left. If set to \n'auto'\n, the menu will automatically align right if there isn't room for the menu's full width when aligned to the left.\n\n    \n\n  \n\n  \n\n    \ndropupAuto\n\n    \nboolean\n\n    \ntrue\n\n    \n\n      \nchecks to see which has more room, above or below. If the dropup has enough room to fully open normally, but\n      there is more room above, the dropup still opens normally. Otherwise, it becomes a dropup. If dropupAuto is\n      set to false, dropups must be called manually.\n\n    \n\n  \n\n  \n\n    \nheader\n\n    \nstring\n\n    \nfalse\n\n    \n\n      \nadds a header to the top of the menu; includes a close button by default\n\n    \n\n  \n\n  \n\n    \nhideDisabled\n\n    \nboolean\n\n    \nfalse\n\n    \n\n      \nremoves disabled options and optgroups from the menu \ndata-hide-disabled: true\n\n    \n\n  \n\n  \n\n    \niconBase\n\n    \nstring\n\n    \n'glyphicon'\n\n    \n\n      \nSet the base to use a different icon font instead of Glyphicons. If changing iconBase, you might also want to change \ntickIcon\n, in case the new icon font uses a different naming scheme.\n\n    \n\n  \n\n  \n\n    \nliveSearch\n\n    \nboolean\n\n    \nfalse\n\n    \n\n      \nWhen set to \ntrue\n, adds a search box to the top of the selectpicker dropdown.\n\n    \n\n  \n\n  \n\n    \nliveSearchNormalize\n\n    \nboolean\n\n    \nfalse\n\n    \n\n      \nSetting liveSearchNormalize to \ntrue\n allows for accent-insensitive searching.\n\n    \n\n  \n\n  \n\n    \nliveSearchPlaceholder\n\n    \nstring\n\n    \nnull\n\n    \n\n      \nWhen set to a string, a placeholder attribute equal to the string will be added to the liveSearch input.\n\n    \n\n  \n\n  \n\n    \nliveSearchStyle\n\n    \nstring\n\n    \n'contains'\n\n    \n\n      \nWhen set to \n'contains'\n, searching will reveal options that contain the searched text. For example, searching for pl with return both Ap\npl\ne, \nPl\num, and \nPl\nantain. When set to \n'startsWith'\n, searching for pl will return only \nPl\num and \nPl\nantain.\n\n    \n\n  \n\n  \n\n    \nmaxOptions\n\n    \ninteger | false\n\n    \nfalse\n\n    \n\n      \nWhen set to an integer and in a multi-select, the number of selected options cannot exceed the given value.\n\n      \nThis option can also exist as a data-attribute for an \n<optgroup>\n, in which case it only applies to that \n<optgroup>\n.\n\n    \n\n  \n\n  \n\n    \nmaxOptionsText\n\n    \nstring | array | function\n\n    \nfunction\n\n    \n\n      \nThe text that is displayed when maxOptions is enabled and the maximum number of options for the given scenario have been selected.\n\n      \nIf a function is used, it must return an array. array[0] is the text used when maxOptions is applied to the entire select element. array[1] is the text used when maxOptions is used on an optgroup. If a string is used, the same text is used for both the element and the optgroup.\n\n    \n\n  \n\n  \n\n    \nmobile\n\n    \nboolean\n\n    \nfalse\n\n    \n\n      \nWhen set to \ntrue\n, enables the device's native menu for select menus.\n\n    \n\n  \n\n  \n\n    \nmultipleSeparator\n\n    \nstring\n\n    \n', '\n\n    \n\n      \nSet the character displayed in the button that separates selected options.\n\n    \n\n  \n\n  \n\n    \nnoneSelectedText\n\n    \nstring\n\n    \n'Nothing selected'\n\n    \n\n      \nThe text that is displayed when a multiple select has no selected options.\n\n    \n\n  \n\n  \n\n    \nnoneResultsText\n\n    \nstring\n\n    \n'No results matched {0}'\n\n    \n\n      \nThe text displayed when a search doesn't return any results.\n\n    \n\n  \n\n  \n\n    \nselectAllText\n\n    \nstring\n\n    \n'Select All'\n\n    \n\n      \nThe text on the button that selects all options when \nactionsBox\n is enabled.\n\n    \n\n  \n\n  \n\n    \nselectedTextFormat\n\n    \n'values'\n | \n'static'\n | \n'count'\n | \n'count > x'\n (where x is an integer)\n\n    \n'values'\n\n    \n\n      \nSpecifies how the selection is displayed with a multiple select.\n\n      \n'values'\n displays a list of the selected options (separated by \nmultipleSeparator\n. \n'static'\n simply displays the select element's title. \n'count'\n displays the total number of selected options. \n'count > x'\n behaves like \n'values'\n until the number of selected options is greater than x; after that, it behaves like \n'count'\n.\n    \n\n  \n\n  \n\n    \nselectOnTab\n\n    \nboolean\n\n    \nfalse\n\n    \n\n      \nWhen set to \ntrue\n, treats the tab character like the enter or space characters within the selectpicker dropdown.\n\n    \n\n  \n\n  \n\n    \nshowContent\n\n    \nboolean\n\n    \ntrue\n\n    \n\n      \nWhen set to \ntrue\n, display custom HTML associated with selected option(s) in the button. When set to \nfalse\n, the option value will be displayed instead.\n\n    \n\n  \n\n  \n\n    \nshowIcon\n\n    \nboolean\n\n    \ntrue\n\n    \n\n      \nWhen set to \ntrue\n, display icon(s) associated with selected option(s) in the button.\n\n    \n\n  \n\n  \n\n    \nshowSubtext\n\n    \nboolean\n\n    \nfalse\n\n    \n\n      \nWhen set to \ntrue\n, display subtext associated with a selected option in the button.\n\n    \n\n  \n\n  \n\n    \nshowTick\n\n    \nboolean\n\n    \nfalse\n\n    \n\n      \nShow checkmark on selected option (for items without \nmultiple\n attribute).\n\n    \n\n  \n\n  \n\n    \nsize\n\n    \n'auto'\n | integer | false\n\n    \n'auto'\n\n    \n\n      \nWhen set to \n'auto'\n, the menu always opens up to show as many items as the window will allow\n      without being cut off.\n\n      \nWhen set to an integer, the menu will show the given number of items, even if the dropdown is cut off.\n\n      \nWhen set to \nfalse\n, the menu will always show all items.\n\n    \n\n  \n\n  \n\n    \nstyle\n\n    \nstring | null\n\n    \nnull\n\n    \n\n      \nWhen set to a string, add the value to the button's style.\n\n    \n\n  \n\n  \n\n    \ntickIcon\n\n    \nstring\n\n    \n'glyphicon-ok'\n\n    \n\n      \nSet which icon to use to display as the \"tick\" next to selected options.\n\n    \n\n  \n\n  \n\n    \ntitle\n\n    \nstring | null\n\n    \nnull\n\n    \n\n      \nThe default title for the selectpicker.\n\n    \n\n  \n\n  \n\n    \nvirtualScroll\n\n    \nboolean | integer\n\n    \n600\n\n    \n\n      \nIf enabled, the items in the dropdown will be rendered using virtualization (i.e. only the items that are within the viewport will be rendered). This drastically improves performance for selects with a large number of options. Set to an integer to only use virtualization if the select has at least that number of options.\n\n    \n\n  \n\n  \n\n    \nwidth\n\n    \n'auto'\n | \n'fit'\n | css-width | false (where \ncss-width\n is a CSS width with units, e.g. \n100px\n)\n\n    \nfalse\n\n    \n\n      \nWhen set to \nauto\n, the width of the selectpicker is automatically adjusted to accommodate the widest option.\n\n      \nWhen set to a css-width, the width of the selectpicker is forced inline to the given value.\n\n      \nWhen set to \nfalse\n, all width information is removed.\n\n    \n\n  \n\n  \n\n    \nwindowPadding\n\n    \ninteger | array\n\n    \n0\n\n    \n\n      \nThis is useful in cases where the window has areas that the dropdown menu should not cover - for instance a fixed header. When set to an integer, the same padding will be added to all sides. Alternatively, an array of integers can be used in the format \n[top, right, bottom, left]\n.\n\n    \n\n  \n\n  \n\n\n\n\n\nEvents\n\n\n\n\nBootstrap-select exposes a few events for hooking into select functionality.\n\n\nhide.bs.select, hidden.bs.select, show.bs.select, and shown.bs.select all have a \nrelatedTarget\n property, whose value is the toggling anchor element.\n\n\n\n  \n\n    \n\n      \nEvent Type\n\n      \nDescription\n\n    \n\n  \n\n  \n\n    \n\n      \nshow.bs.select\n\n      \nThis event fires immediately when the show instance method is called.\n\n    \n\n    \n\n      \nshown.bs.select\n\n      \nThis event is fired when the dropdown has been made visible to the user (will wait for CSS transitions, to complete).\n\n    \n\n    \n\n      \nhide.bs.select\n\n      \nThis event is fired immediately when the hide instance method has been called.\n\n    \n\n    \n\n      \nhidden.bs.select\n\n      \nThis event is fired when the dropdown has finished being hidden from the user (will wait for CSS transitions, to complete).\n\n    \n\n    \n\n      \nloaded.bs.select\n\n      \nThis event fires after the select has been initialized.\n\n    \n\n    \n\n      \nrendered.bs.select\n\n      \nThis event fires after the render instance has been called.\n\n    \n\n    \n\n      \nrefreshed.bs.select\n\n      \nThis event fires after the refresh instance has been called.\n\n    \n\n    \n\n      \nchanged.bs.select\n\n      \nThis event fires after the select's value has been changed. It passes through event, clickedIndex, newValue, oldValue.\n\n    \n\n  \n\n\n\n\n\n$('#mySelect').on('hidden.bs.select', function (e) {\n  // do something...\n});",
            "title": "Options"
        },
        {
            "location": "/options/#core-options",
            "text": "Options can be passed via data attributes or JavaScript. For data attributes, append the option name to  data- , as in  data-style=\"\"  or  data-selected-text-format=\"count\" .  \n   \n   \n     Name \n     Type \n     Default \n     Description \n   \n   \n   \n   \n     actionsBox \n     boolean \n     false \n     \n       When set to  true , adds two buttons to the top of the dropdown menu ( Select All  &  Deselect All ). \n     \n   \n   \n     container \n     string | false \n     false \n     \n         When set to a string, appends the select to a specific element or selector, e.g.,  container: 'body' | '.main-body' \n     \n   \n   \n     countSelectedText \n     string | function \n     function \n     \n       Sets the format for the text displayed when selectedTextFormat is  count  or  count > # . {0} is the selected amount. {1} is total available for selection. \n       When set to a function, the first parameter is the number of selected options, and the second is the total number of \n      options. The function must return a string. \n     \n   \n   \n     deselectAllText \n     string \n     'Deselect All' \n     \n       The text on the button that deselects all options when  actionsBox  is enabled. \n     \n   \n   \n     dropdownAlignRight \n     boolean |  'auto' \n     false \n     \n       Align the menu to the right instead of the left. If set to  'auto' , the menu will automatically align right if there isn't room for the menu's full width when aligned to the left. \n     \n   \n   \n     dropupAuto \n     boolean \n     true \n     \n       checks to see which has more room, above or below. If the dropup has enough room to fully open normally, but\n      there is more room above, the dropup still opens normally. Otherwise, it becomes a dropup. If dropupAuto is\n      set to false, dropups must be called manually. \n     \n   \n   \n     header \n     string \n     false \n     \n       adds a header to the top of the menu; includes a close button by default \n     \n   \n   \n     hideDisabled \n     boolean \n     false \n     \n       removes disabled options and optgroups from the menu  data-hide-disabled: true \n     \n   \n   \n     iconBase \n     string \n     'glyphicon' \n     \n       Set the base to use a different icon font instead of Glyphicons. If changing iconBase, you might also want to change  tickIcon , in case the new icon font uses a different naming scheme. \n     \n   \n   \n     liveSearch \n     boolean \n     false \n     \n       When set to  true , adds a search box to the top of the selectpicker dropdown. \n     \n   \n   \n     liveSearchNormalize \n     boolean \n     false \n     \n       Setting liveSearchNormalize to  true  allows for accent-insensitive searching. \n     \n   \n   \n     liveSearchPlaceholder \n     string \n     null \n     \n       When set to a string, a placeholder attribute equal to the string will be added to the liveSearch input. \n     \n   \n   \n     liveSearchStyle \n     string \n     'contains' \n     \n       When set to  'contains' , searching will reveal options that contain the searched text. For example, searching for pl with return both Ap pl e,  Pl um, and  Pl antain. When set to  'startsWith' , searching for pl will return only  Pl um and  Pl antain. \n     \n   \n   \n     maxOptions \n     integer | false \n     false \n     \n       When set to an integer and in a multi-select, the number of selected options cannot exceed the given value. \n       This option can also exist as a data-attribute for an  <optgroup> , in which case it only applies to that  <optgroup> . \n     \n   \n   \n     maxOptionsText \n     string | array | function \n     function \n     \n       The text that is displayed when maxOptions is enabled and the maximum number of options for the given scenario have been selected. \n       If a function is used, it must return an array. array[0] is the text used when maxOptions is applied to the entire select element. array[1] is the text used when maxOptions is used on an optgroup. If a string is used, the same text is used for both the element and the optgroup. \n     \n   \n   \n     mobile \n     boolean \n     false \n     \n       When set to  true , enables the device's native menu for select menus. \n     \n   \n   \n     multipleSeparator \n     string \n     ', ' \n     \n       Set the character displayed in the button that separates selected options. \n     \n   \n   \n     noneSelectedText \n     string \n     'Nothing selected' \n     \n       The text that is displayed when a multiple select has no selected options. \n     \n   \n   \n     noneResultsText \n     string \n     'No results matched {0}' \n     \n       The text displayed when a search doesn't return any results. \n     \n   \n   \n     selectAllText \n     string \n     'Select All' \n     \n       The text on the button that selects all options when  actionsBox  is enabled. \n     \n   \n   \n     selectedTextFormat \n     'values'  |  'static'  |  'count'  |  'count > x'  (where x is an integer) \n     'values' \n     \n       Specifies how the selection is displayed with a multiple select. \n       'values'  displays a list of the selected options (separated by  multipleSeparator .  'static'  simply displays the select element's title.  'count'  displays the total number of selected options.  'count > x'  behaves like  'values'  until the number of selected options is greater than x; after that, it behaves like  'count' .\n     \n   \n   \n     selectOnTab \n     boolean \n     false \n     \n       When set to  true , treats the tab character like the enter or space characters within the selectpicker dropdown. \n     \n   \n   \n     showContent \n     boolean \n     true \n     \n       When set to  true , display custom HTML associated with selected option(s) in the button. When set to  false , the option value will be displayed instead. \n     \n   \n   \n     showIcon \n     boolean \n     true \n     \n       When set to  true , display icon(s) associated with selected option(s) in the button. \n     \n   \n   \n     showSubtext \n     boolean \n     false \n     \n       When set to  true , display subtext associated with a selected option in the button. \n     \n   \n   \n     showTick \n     boolean \n     false \n     \n       Show checkmark on selected option (for items without  multiple  attribute). \n     \n   \n   \n     size \n     'auto'  | integer | false \n     'auto' \n     \n       When set to  'auto' , the menu always opens up to show as many items as the window will allow\n      without being cut off. \n       When set to an integer, the menu will show the given number of items, even if the dropdown is cut off. \n       When set to  false , the menu will always show all items. \n     \n   \n   \n     style \n     string | null \n     null \n     \n       When set to a string, add the value to the button's style. \n     \n   \n   \n     tickIcon \n     string \n     'glyphicon-ok' \n     \n       Set which icon to use to display as the \"tick\" next to selected options. \n     \n   \n   \n     title \n     string | null \n     null \n     \n       The default title for the selectpicker. \n     \n   \n   \n     virtualScroll \n     boolean | integer \n     600 \n     \n       If enabled, the items in the dropdown will be rendered using virtualization (i.e. only the items that are within the viewport will be rendered). This drastically improves performance for selects with a large number of options. Set to an integer to only use virtualization if the select has at least that number of options. \n     \n   \n   \n     width \n     'auto'  |  'fit'  | css-width | false (where  css-width  is a CSS width with units, e.g.  100px ) \n     false \n     \n       When set to  auto , the width of the selectpicker is automatically adjusted to accommodate the widest option. \n       When set to a css-width, the width of the selectpicker is forced inline to the given value. \n       When set to  false , all width information is removed. \n     \n   \n   \n     windowPadding \n     integer | array \n     0 \n     \n       This is useful in cases where the window has areas that the dropdown menu should not cover - for instance a fixed header. When set to an integer, the same padding will be added to all sides. Alternatively, an array of integers can be used in the format  [top, right, bottom, left] .",
            "title": "Core options"
        },
        {
            "location": "/options/#events",
            "text": "Bootstrap-select exposes a few events for hooking into select functionality.  hide.bs.select, hidden.bs.select, show.bs.select, and shown.bs.select all have a  relatedTarget  property, whose value is the toggling anchor element.  \n   \n     \n       Event Type \n       Description \n     \n   \n   \n     \n       show.bs.select \n       This event fires immediately when the show instance method is called. \n     \n     \n       shown.bs.select \n       This event is fired when the dropdown has been made visible to the user (will wait for CSS transitions, to complete). \n     \n     \n       hide.bs.select \n       This event is fired immediately when the hide instance method has been called. \n     \n     \n       hidden.bs.select \n       This event is fired when the dropdown has finished being hidden from the user (will wait for CSS transitions, to complete). \n     \n     \n       loaded.bs.select \n       This event fires after the select has been initialized. \n     \n     \n       rendered.bs.select \n       This event fires after the render instance has been called. \n     \n     \n       refreshed.bs.select \n       This event fires after the refresh instance has been called. \n     \n     \n       changed.bs.select \n       This event fires after the select's value has been changed. It passes through event, clickedIndex, newValue, oldValue. \n     \n     $('#mySelect').on('hidden.bs.select', function (e) {\n  // do something...\n});",
            "title": "Events"
        },
        {
            "location": "/methods/",
            "text": "Methods\n\n\nInterface with bootstrap-select.\n\n\n\n\n.selectpicker('val')\n\n\nYou can set the selected value by calling the \nval\n method on the element.\n\n\n$('.selectpicker').selectpicker('val', 'Mustard');\n$('.selectpicker').selectpicker('val', ['Mustard','Relish']);\n\n\n\n\nThis is different to calling \nval()\n directly on the \nselect\n element. If you call \nval()\n on the element directly, the bootstrap-select ui will not refresh (as the change event only fires from user interaction). You will have to call the ui refresh method yourself.\n\n\n$('.selectpicker').val('Mustard');\n$('.selectpicker').selectpicker('render');\n\n// this is the equivalent of the above\n$('.selectpicker').selectpicker('val', 'Mustard');\n\n\n\n\n\n\n.selectpicker('selectAll')\n\n\nThis will select all items in a multi-select.\n\n\n$('.selectpicker').selectpicker('selectAll');\n\n\n\n\n\n\n.selectpicker('deselectAll')\n\n\nThis will deselect all items in a multi-select.\n\n\n$('.selectpicker').selectpicker('deselectAll');\n\n\n\n\n\n\n.selectpicker('render')\n\n\nYou can force a re-render of the bootstrap-select ui with the \nrender\n method. This is useful if you programatically change any underlying values that affect the layout of the element.\n\n\n$('.selectpicker').selectpicker('render');\n\n\n\n\n\n\n.selectpicker('mobile')\n\n\nEnable mobile scrolling by calling \n$('.selectpicker').selectpicker('mobile')\n. This enables the device's native menu for select menus.\n\n\nThe method for detecting the browser is left up to the user.\n\n\nif( /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ) {\n  $('.selectpicker').selectpicker('mobile');\n}\n\n\n\n\n\n\n.selectpicker('setStyle')\n\n\nModify the class(es) associated with either the button itself or its container.\n\n\nIf changing the class on the container:\n\n\n$('.selectpicker').addClass('col-lg-12').selectpicker('setStyle');\n\n\n\n\nIf changing the class(es) on the button (altering data-style):\n\n\n// Replace Class\n$('.selectpicker').selectpicker('setStyle', 'btn-danger');\n\n// Add Class\n$('.selectpicker').selectpicker('setStyle', 'btn-large', 'add');\n\n// Remove Class\n$('.selectpicker').selectpicker('setStyle', 'btn-large', 'remove');\n\n\n\n\n\n\n.selectpicker('refresh')\n\n\nTo programmatically update a select with JavaScript, first manipulate the select, then use the \nrefresh\n method to \nupdate the UI to match the new state. This is necessary when removing or adding options, or when disabling/enabling a \nselect via JavaScript.\n\n\n$('.selectpicker').selectpicker('refresh');\n\n\n\n\n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n    \n\n  \n\n\n  \nRemove Mustard\n\n  \nRemove Ketchup\n\n  \nRemove Relish\n\n\n\n\n\n<select class=\"selectpicker remove-example\">\n  <option value=\"Mustard\">Mustard</option>\n  <option value=\"Ketchup\">Ketchup</option>\n  <option value=\"Relish\">Relish</option>\n</select>\n\n<button class=\"btn btn-warning rm-mustard\">Remove Mustard</button>\n<button class=\"btn btn-danger rm-ketchup\">Remove Ketchup</button>\n<button class=\"btn btn-success rm-relish\">Remove Relish</button>\n\n\n\n\n$('.rm-mustard').click(function () {\n  $('.remove-example').find('[value=Mustard]').remove();\n  $('.remove-example').selectpicker('refresh');\n});\n\n\n\n\n\n  \n\n    \n\n      \nMustard\n\n      \nKetchup\n\n      \nRelish\n\n    \n\n  \n\n\n  \n Disable\n\n  \n Enable\n\n\n\n\n\n$('.ex-disable').click(function () {\n  $('.disable-example').prop('disabled', true);\n  $('.disable-example').selectpicker('refresh');\n});\n\n$('.ex-enable').click(function () {\n  $('.disable-example').prop('disabled', false);\n  $('.disable-example').selectpicker('refresh');\n});\n\n\n\n\n\n  window.onload = function () {\n    var $re = $('.remove-example'),\n        $de = $('.disable-example');\n\n    $('.rm-mustard').click(function () {\n      $re.find('[value=Mustard]').remove();\n      $re.selectpicker('refresh');\n    });\n    $('.rm-ketchup').click(function () {\n      $re.find('[value=Ketchup]').remove();\n      $re.selectpicker('refresh');\n    });\n    $('.rm-relish').click(function () {\n      $re.find('[value=Relish]').remove();\n      $re.selectpicker('refresh');\n    });\n    $('.ex-disable').click(function () {\n      $de.prop('disabled', true);\n      $de.selectpicker('refresh');\n    });\n    $('.ex-enable').click(function () {\n      $de.prop('disabled', false);\n      $de.selectpicker('refresh');\n    });\n  };\n\n\n\n\n\n\n.selectpicker('toggle')\n\n\nProgrammatically toggles the bootstrap-select menu open/closed.\n\n\n$('.selectpicker').selectpicker('toggle');\n\n\n\n\n\n\n.selectpicker('hide')\n\n\nTo programmatically hide the bootstrap-select use the \nhide\n method (this only affects the visibility of the bootstrap-select itself).\n\n\n$('.selectpicker').selectpicker('hide');\n\n\n\n\n\n\n.selectpicker('show')\n\n\nTo programmatically show the bootstrap-select use the \nshow\n method (this only affects the visibility of the bootstrap-select itself).\n\n\n$('.selectpicker').selectpicker('show');\n\n\n\n\n\n\n.selectpicker('destroy')\n\n\nTo programmatically destroy the bootstrap-select, use the \ndestroy\n method.\n\n\n$('.selectpicker').selectpicker('destroy');",
            "title": "Methods"
        },
        {
            "location": "/methods/#methods",
            "text": "Interface with bootstrap-select.",
            "title": "Methods"
        },
        {
            "location": "/methods/#selectpickerval",
            "text": "You can set the selected value by calling the  val  method on the element.  $('.selectpicker').selectpicker('val', 'Mustard');\n$('.selectpicker').selectpicker('val', ['Mustard','Relish']);  This is different to calling  val()  directly on the  select  element. If you call  val()  on the element directly, the bootstrap-select ui will not refresh (as the change event only fires from user interaction). You will have to call the ui refresh method yourself.  $('.selectpicker').val('Mustard');\n$('.selectpicker').selectpicker('render');\n\n// this is the equivalent of the above\n$('.selectpicker').selectpicker('val', 'Mustard');",
            "title": ".selectpicker('val')"
        },
        {
            "location": "/methods/#selectpickerselectall",
            "text": "This will select all items in a multi-select.  $('.selectpicker').selectpicker('selectAll');",
            "title": ".selectpicker('selectAll')"
        },
        {
            "location": "/methods/#selectpickerdeselectall",
            "text": "This will deselect all items in a multi-select.  $('.selectpicker').selectpicker('deselectAll');",
            "title": ".selectpicker('deselectAll')"
        },
        {
            "location": "/methods/#selectpickerrender",
            "text": "You can force a re-render of the bootstrap-select ui with the  render  method. This is useful if you programatically change any underlying values that affect the layout of the element.  $('.selectpicker').selectpicker('render');",
            "title": ".selectpicker('render')"
        },
        {
            "location": "/methods/#selectpickermobile",
            "text": "Enable mobile scrolling by calling  $('.selectpicker').selectpicker('mobile') . This enables the device's native menu for select menus.  The method for detecting the browser is left up to the user.  if( /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ) {\n  $('.selectpicker').selectpicker('mobile');\n}",
            "title": ".selectpicker('mobile')"
        },
        {
            "location": "/methods/#selectpickersetstyle",
            "text": "Modify the class(es) associated with either the button itself or its container.  If changing the class on the container:  $('.selectpicker').addClass('col-lg-12').selectpicker('setStyle');  If changing the class(es) on the button (altering data-style):  // Replace Class\n$('.selectpicker').selectpicker('setStyle', 'btn-danger');\n\n// Add Class\n$('.selectpicker').selectpicker('setStyle', 'btn-large', 'add');\n\n// Remove Class\n$('.selectpicker').selectpicker('setStyle', 'btn-large', 'remove');",
            "title": ".selectpicker('setStyle')"
        },
        {
            "location": "/methods/#selectpickerrefresh",
            "text": "To programmatically update a select with JavaScript, first manipulate the select, then use the  refresh  method to \nupdate the UI to match the new state. This is necessary when removing or adding options, or when disabling/enabling a \nselect via JavaScript.  $('.selectpicker').selectpicker('refresh');  \n   \n     \n       Mustard \n       Ketchup \n       Relish \n     \n   \n\n   Remove Mustard \n   Remove Ketchup \n   Remove Relish   <select class=\"selectpicker remove-example\">\n  <option value=\"Mustard\">Mustard</option>\n  <option value=\"Ketchup\">Ketchup</option>\n  <option value=\"Relish\">Relish</option>\n</select>\n\n<button class=\"btn btn-warning rm-mustard\">Remove Mustard</button>\n<button class=\"btn btn-danger rm-ketchup\">Remove Ketchup</button>\n<button class=\"btn btn-success rm-relish\">Remove Relish</button>  $('.rm-mustard').click(function () {\n  $('.remove-example').find('[value=Mustard]').remove();\n  $('.remove-example').selectpicker('refresh');\n});  \n   \n     \n       Mustard \n       Ketchup \n       Relish \n     \n   \n\n    Disable \n    Enable   $('.ex-disable').click(function () {\n  $('.disable-example').prop('disabled', true);\n  $('.disable-example').selectpicker('refresh');\n});\n\n$('.ex-enable').click(function () {\n  $('.disable-example').prop('disabled', false);\n  $('.disable-example').selectpicker('refresh');\n});  \n  window.onload = function () {\n    var $re = $('.remove-example'),\n        $de = $('.disable-example');\n\n    $('.rm-mustard').click(function () {\n      $re.find('[value=Mustard]').remove();\n      $re.selectpicker('refresh');\n    });\n    $('.rm-ketchup').click(function () {\n      $re.find('[value=Ketchup]').remove();\n      $re.selectpicker('refresh');\n    });\n    $('.rm-relish').click(function () {\n      $re.find('[value=Relish]').remove();\n      $re.selectpicker('refresh');\n    });\n    $('.ex-disable').click(function () {\n      $de.prop('disabled', true);\n      $de.selectpicker('refresh');\n    });\n    $('.ex-enable').click(function () {\n      $de.prop('disabled', false);\n      $de.selectpicker('refresh');\n    });\n  };",
            "title": ".selectpicker('refresh')"
        },
        {
            "location": "/methods/#selectpickertoggle",
            "text": "Programmatically toggles the bootstrap-select menu open/closed.  $('.selectpicker').selectpicker('toggle');",
            "title": ".selectpicker('toggle')"
        },
        {
            "location": "/methods/#selectpickerhide",
            "text": "To programmatically hide the bootstrap-select use the  hide  method (this only affects the visibility of the bootstrap-select itself).  $('.selectpicker').selectpicker('hide');",
            "title": ".selectpicker('hide')"
        },
        {
            "location": "/methods/#selectpickershow",
            "text": "To programmatically show the bootstrap-select use the  show  method (this only affects the visibility of the bootstrap-select itself).  $('.selectpicker').selectpicker('show');",
            "title": ".selectpicker('show')"
        },
        {
            "location": "/methods/#selectpickerdestroy",
            "text": "To programmatically destroy the bootstrap-select, use the  destroy  method.  $('.selectpicker').selectpicker('destroy');",
            "title": ".selectpicker('destroy')"
        }
    ]
}