{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Quick start Bootstrap-select requires jQuery v1.9.1+, Bootstrap\u2019s dropdown.js component, and Bootstrap's CSS. If you're not already using Bootstrap in your project, a precompiled version of the Bootstrap v3.3.7 minimum requirements can be downloaded here . If using bootstrap-select with Bootstrap v4+, you'll also need Popper.js. For all of Bootstrap v4's requirements, see Getting started . A precompiled version of the requirements will be made available in an upcoming release of bootstrap-select. Several quick start options are available: Download the latest release. Clone the repo: git clone https://github.com/snapappointments/bootstrap-select.git Install with npm : npm install bootstrap-select Install with yarn : yarn add bootstrap-select Install with Composer : composer require snapappointments/bootstrap-select Install with NuGet : Install-Package bootstrap-select Install with Bower : bower install bootstrap-select Install via CDN ( cdnjs or jsDelivr ): <!-- Latest compiled and minified CSS --> <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/css/bootstrap-select.min.css\"> <!-- Latest compiled and minified JavaScript --> <script src=\"https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/js/bootstrap-select.min.js\"></script> <!-- (Optional) Latest compiled and minified JavaScript translation files --> <script src=\"https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/js/i18n/defaults-*.min.js\"></script> The CDN is updated after the release is made public, which means that there is a delay between the publishing of a release and its availability on the CDN. Usage Bootstrap 4 only works with bootstrap-select v1.13.0+. By default, bootstrap-select automatically detects the version of Bootstrap being used. However, there are some instances where the version detection won't work. See the documentation for more information. Via selectpicker class Add the selectpicker class to your select elements to auto-initialize bootstrap-select. <select class=\"selectpicker\"> <option>Mustard</option> <option>Ketchup</option> <option>Barbecue</option> </select> Via JavaScript // To style only selects with the my-select class $('.my-select').selectpicker(); or // To style all selects $('select').selectpicker(); If calling bootstrap-select via JavaScript, you will need to wrap your code in a .ready() block or place it at the bottom of the page (after the last instance of bootstrap-select). $(function () { $('select').selectpicker(); });","title":"Getting Started"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#quick-start","text":"Bootstrap-select requires jQuery v1.9.1+, Bootstrap\u2019s dropdown.js component, and Bootstrap's CSS. If you're not already using Bootstrap in your project, a precompiled version of the Bootstrap v3.3.7 minimum requirements can be downloaded here . If using bootstrap-select with Bootstrap v4+, you'll also need Popper.js. For all of Bootstrap v4's requirements, see Getting started . A precompiled version of the requirements will be made available in an upcoming release of bootstrap-select. Several quick start options are available: Download the latest release. Clone the repo: git clone https://github.com/snapappointments/bootstrap-select.git Install with npm : npm install bootstrap-select Install with yarn : yarn add bootstrap-select Install with Composer : composer require snapappointments/bootstrap-select Install with NuGet : Install-Package bootstrap-select Install with Bower : bower install bootstrap-select Install via CDN ( cdnjs or jsDelivr ): <!-- Latest compiled and minified CSS --> <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/css/bootstrap-select.min.css\"> <!-- Latest compiled and minified JavaScript --> <script src=\"https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/js/bootstrap-select.min.js\"></script> <!-- (Optional) Latest compiled and minified JavaScript translation files --> <script src=\"https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.9/dist/js/i18n/defaults-*.min.js\"></script> The CDN is updated after the release is made public, which means that there is a delay between the publishing of a release and its availability on the CDN.","title":"Quick start"},{"location":"#usage","text":"Bootstrap 4 only works with bootstrap-select v1.13.0+. By default, bootstrap-select automatically detects the version of Bootstrap being used. However, there are some instances where the version detection won't work. See the documentation for more information.","title":"Usage"},{"location":"#via-selectpicker-class","text":"Add the selectpicker class to your select elements to auto-initialize bootstrap-select. <select class=\"selectpicker\"> <option>Mustard</option> <option>Ketchup</option> <option>Barbecue</option> </select>","title":"Via selectpicker class"},{"location":"#via-javascript","text":"// To style only selects with the my-select class $('.my-select').selectpicker(); or // To style all selects $('select').selectpicker(); If calling bootstrap-select via JavaScript, you will need to wrap your code in a .ready() block or place it at the bottom of the page (after the last instance of bootstrap-select). $(function () { $('select').selectpicker(); });","title":"Via JavaScript"},{"location":"examples/","text":"Basic examples Standard select boxes Make this: Mustard Ketchup Relish Become this: Mustard Ketchup Relish <select class=\"selectpicker\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> Select boxes with optgroups Mustard Ketchup Relish Tent Flashlight Toilet Paper <select class=\"selectpicker\"> <optgroup label=\"Picnic\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </optgroup> <optgroup label=\"Camping\"> <option>Tent</option> <option>Flashlight</option> <option>Toilet Paper</option> </optgroup> </select> Multiple select boxes Mustard Ketchup Relish <select class=\"selectpicker\" multiple> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> Live search Live search You can add a search input by passing data-live-search=\"true\" attribute: Hot Dog, Fries and a Soda Burger, Shake and a Smile Sugar, Spice and all things nice Key words Add key words to options to improve their searchability using data-tokens . Hot Dog, Fries and a Soda Burger, Shake and a Smile Sugar, Spice and all things nice <select class=\"selectpicker\" data-live-search=\"true\"> <option data-tokens=\"ketchup mustard\">Hot Dog, Fries and a Soda</option> <option data-tokens=\"mustard\">Burger, Shake and a Smile</option> <option data-tokens=\"frosting\">Sugar, Spice and all things nice</option> </select> Limit the number of selections Limit the number of options that can be selected via the data-max-options attribute. It also works for option groups. Customize the message displayed when the limit is reached with maxOptionsText . Mustard Ketchup Relish Mustard Ketchup Relish Plain Steamed Toasted <select class=\"selectpicker\" multiple data-max-options=\"2\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> <select class=\"selectpicker\" multiple> <optgroup label=\"Condiments\" data-max-options=\"2\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </optgroup> <optgroup label=\"Breads\" data-max-options=\"2\"> <option>Plain</option> <option>Steamed</option> <option>Toasted</option> </optgroup> </select> Custom button text Placeholder Using the title attribute will set the default placeholder text when nothing is selected. This works for both multiple and standard select boxes: Multiple Mustard Ketchup Relish Standard Mustard Ketchup Relish <select class=\"selectpicker\" multiple title=\"Choose one of the following...\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> Selected text Set the title attribute on individual options to display alternative text when the option is selected: Hot Dog, Fries and a Soda Burger, Shake and a Smile Sugar, Spice and all things nice <select class=\"selectpicker\"> <option title=\"Combo 1\">Hot Dog, Fries and a Soda</option> <option title=\"Combo 2\">Burger, Shake and a Smile</option> <option title=\"Combo 3\">Sugar, Spice and all things nice</option> </select> Selected text format Specify how the selection is displayed with the data-selected-text-format attribute on a multiple select. The supported values are: values : A comma delimited list of selected values (default) count : If one item is selected, then the option value is shown. If more than one is selected then the number of selected items is displayed, e.g. 2 of 6 selected count > x : Where x is the number of items selected when the display format changes from values to count static : Always show the select title (placeholder), regardless of selection Mustard Ketchup Relish <select class=\"selectpicker\" multiple data-selected-text-format=\"count\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> Mustard Ketchup Relish Onions <select class=\"selectpicker\" multiple data-selected-text-format=\"count > 3\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> <option>Onions</option> </select> Styling Button classes You can set the button classes via the data-style attribute: Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish <select class=\"selectpicker\" data-style=\"btn-primary\"> ... </select> <select class=\"selectpicker\" data-style=\"btn-info\"> ... </select> <select class=\"selectpicker\" data-style=\"btn-success\"> ... </select> <select class=\"selectpicker\" data-style=\"btn-warning\"> ... </select> <select class=\"selectpicker\" data-style=\"btn-danger\"> ... </select> Checkmark on selected option You can also show the checkmark icon on standard select boxes with the show-tick class: Mustard Ketchup Relish <select class=\"selectpicker show-tick\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> Menu arrow (deprecated) The Bootstrap menu arrow can be added with the show-menu-arrow class: Note: This feature has been deprecated and will be removed in v2.0.0. Mustard Ketchup Relish <select class=\"selectpicker show-menu-arrow\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> Style individual options Classes and styles added to options are transferred to the select box: Mustard Ketchup Relish <select class=\"selectpicker\"> <option>Mustard</option> <option class=\"special\">Ketchup</option> <option style=\"background: #5cb85c; color: #fff;\">Relish</option> </select> .special { font-weight: bold !important; color: #fff !important; background: #bc0000 !important; text-transform: uppercase; } Width Wrap selects in grid columns, or any custom parent element, to easily enforce desired widths. Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish <div class=\"row\"> <div class=\"col-sm-3\"> <div class=\"form-group\"> <select class=\"selectpicker form-control\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> </div> </div> </div> Alternatively, use the data-width attribute to set the width of the select. Set data-width to 'auto' to automatically adjust the width of the select to its widest option. 'fit' automatically adjusts the width of the select to the width of its currently selected option. An exact value can also be specified, e.g., 300px or 50% . width: 'auto' Mustard Ketchup Relish All of the above (and much, much more!) width: 'fit' Mustard Ketchup Relish All of the above (and much, much more!) width: '150px' Mustard Ketchup Relish All of the above (and much, much more!) width: '75%' Mustard Ketchup Relish All of the above (and much, much more!) <select class=\"selectpicker\" data-width=\"auto\"> ... </select> <select class=\"selectpicker\" data-width=\"fit\"> ... </select> <select class=\"selectpicker\" data-width=\"100px\"> ... </select> <select class=\"selectpicker\" data-width=\"75%\"> ... </select> Customize options Icons Add an icon to an option or optgroup with the data-icon attribute: Note: Glyphicons are not included in Bootstrap 4. To use FontAwesome, or another icon library, you'll need to set iconBase to something other than 'glyphicon' . Mustard Ketchup Relish Mayonnaise Barbecue Sauce <select class=\"selectpicker\"> <option data-icon=\"fa-heart\">Ketchup</option> </select> Custom content Insert custom HTML into the option with the data-content attribute: Note: This feature inserts HTML into the DOM. By default, it is sanitized using our built-in sanitizer . Mustard Ketchup Relish Mayonnaise <select class=\"selectpicker\"> <option data-content=\"<span class='badge badge-success'>Relish</span>\">Relish</option> </select> Subtext Add subtext to an option or optgroup with the data-subtext attribute: Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa With showSubtext set to true. <select class=\"selectpicker\" data-size=\"5\"> <option data-subtext=\"Heinz\">Ketchup</option> </select> Customize menu Menu size The size option is set to 'auto' by default. When size is set to 'auto' , the menu always opens up to show as many items as the window will allow without being cut off. Set size to false to always show all items. The size of the menu can also be specifed using the data-size attribute. Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa Specify a number for data-size to choose the maximum number of items to show in the menu. Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa <select class=\"selectpicker\" data-size=\"5\"> ... </select> Select/deselect all options Adds two buttons to the top of the menu - Select All & Deselect All with data-actions-box=\"true\" . Mustard Ketchup Relish <select class=\"selectpicker\" multiple data-actions-box=\"true\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> Divider Add data-divider=\"true\" to an option to turn it into a divider. Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa <select class=\"selectpicker\" data-size=\"5\"> <option data-divider=\"true\"></option> </select> Menu header Add a header to the dropdown menu, e.g. header: 'Select a condiment' or data-header=\"Select a condiment\" Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa <select class=\"selectpicker\" data-header=\"Select a condiment\"> ... </select> Container Append the select menu to a specific element, e.g. container: 'body' or data-container=\".main-content\" . This is useful if the select element is inside an element with overflow: hidden . container: false Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa container: 'body' Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa <div style=\"overflow:hidden;\"> <select class=\"selectpicker\"> ... </select> <select class=\"selectpicker\" data-container=\"body\"> ... </select> </div> Dropup menu dropupAuto is set to true by default, which automatically determines whether or not the menu should display above or below the select box. If dropupAuto is set to false, manually make the select a dropup menu by adding the .dropup class to the select. Mustard Ketchup Relish <select class=\"selectpicker dropup\" data-dropup-auto=\"false\"> ... </select> Disabled Disabled select box Mustard Ketchup Relish <select class=\"selectpicker\" disabled> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> Disabled options Mustard Ketchup Relish <select class=\"selectpicker\"> <option>Mustard</option> <option disabled>Ketchup</option> <option>Relish</option> </select> Disabled option groups Mustard Ketchup Relish Tent Flashlight Toilet Paper <select class=\"selectpicker test\"> <optgroup label=\"Picnic\" disabled> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </optgroup> <optgroup label=\"Camping\"> <option>Tent</option> <option>Flashlight</option> <option>Toilet Paper</option> </optgroup> </select>","title":"Examples"},{"location":"examples/#basic-examples","text":"","title":"Basic examples"},{"location":"examples/#standard-select-boxes","text":"Make this: Mustard Ketchup Relish Become this: Mustard Ketchup Relish <select class=\"selectpicker\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select>","title":"Standard select boxes"},{"location":"examples/#select-boxes-with-optgroups","text":"Mustard Ketchup Relish Tent Flashlight Toilet Paper <select class=\"selectpicker\"> <optgroup label=\"Picnic\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </optgroup> <optgroup label=\"Camping\"> <option>Tent</option> <option>Flashlight</option> <option>Toilet Paper</option> </optgroup> </select>","title":"Select boxes with optgroups"},{"location":"examples/#multiple-select-boxes","text":"Mustard Ketchup Relish <select class=\"selectpicker\" multiple> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select>","title":"Multiple select boxes"},{"location":"examples/#live-search","text":"","title":"Live search"},{"location":"examples/#live-search_1","text":"You can add a search input by passing data-live-search=\"true\" attribute: Hot Dog, Fries and a Soda Burger, Shake and a Smile Sugar, Spice and all things nice","title":"Live search"},{"location":"examples/#key-words","text":"Add key words to options to improve their searchability using data-tokens . Hot Dog, Fries and a Soda Burger, Shake and a Smile Sugar, Spice and all things nice <select class=\"selectpicker\" data-live-search=\"true\"> <option data-tokens=\"ketchup mustard\">Hot Dog, Fries and a Soda</option> <option data-tokens=\"mustard\">Burger, Shake and a Smile</option> <option data-tokens=\"frosting\">Sugar, Spice and all things nice</option> </select>","title":"Key words"},{"location":"examples/#limit-the-number-of-selections","text":"Limit the number of options that can be selected via the data-max-options attribute. It also works for option groups. Customize the message displayed when the limit is reached with maxOptionsText . Mustard Ketchup Relish Mustard Ketchup Relish Plain Steamed Toasted <select class=\"selectpicker\" multiple data-max-options=\"2\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> <select class=\"selectpicker\" multiple> <optgroup label=\"Condiments\" data-max-options=\"2\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </optgroup> <optgroup label=\"Breads\" data-max-options=\"2\"> <option>Plain</option> <option>Steamed</option> <option>Toasted</option> </optgroup> </select>","title":"Limit the number of selections"},{"location":"examples/#custom-button-text","text":"","title":"Custom button text"},{"location":"examples/#placeholder","text":"Using the title attribute will set the default placeholder text when nothing is selected. This works for both multiple and standard select boxes: Multiple Mustard Ketchup Relish Standard Mustard Ketchup Relish <select class=\"selectpicker\" multiple title=\"Choose one of the following...\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select>","title":"Placeholder"},{"location":"examples/#selected-text","text":"Set the title attribute on individual options to display alternative text when the option is selected: Hot Dog, Fries and a Soda Burger, Shake and a Smile Sugar, Spice and all things nice <select class=\"selectpicker\"> <option title=\"Combo 1\">Hot Dog, Fries and a Soda</option> <option title=\"Combo 2\">Burger, Shake and a Smile</option> <option title=\"Combo 3\">Sugar, Spice and all things nice</option> </select>","title":"Selected text"},{"location":"examples/#selected-text-format","text":"Specify how the selection is displayed with the data-selected-text-format attribute on a multiple select. The supported values are: values : A comma delimited list of selected values (default) count : If one item is selected, then the option value is shown. If more than one is selected then the number of selected items is displayed, e.g. 2 of 6 selected count > x : Where x is the number of items selected when the display format changes from values to count static : Always show the select title (placeholder), regardless of selection Mustard Ketchup Relish <select class=\"selectpicker\" multiple data-selected-text-format=\"count\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> Mustard Ketchup Relish Onions <select class=\"selectpicker\" multiple data-selected-text-format=\"count > 3\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> <option>Onions</option> </select>","title":"Selected text format"},{"location":"examples/#styling","text":"","title":"Styling"},{"location":"examples/#button-classes","text":"You can set the button classes via the data-style attribute: Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish <select class=\"selectpicker\" data-style=\"btn-primary\"> ... </select> <select class=\"selectpicker\" data-style=\"btn-info\"> ... </select> <select class=\"selectpicker\" data-style=\"btn-success\"> ... </select> <select class=\"selectpicker\" data-style=\"btn-warning\"> ... </select> <select class=\"selectpicker\" data-style=\"btn-danger\"> ... </select>","title":"Button classes"},{"location":"examples/#checkmark-on-selected-option","text":"You can also show the checkmark icon on standard select boxes with the show-tick class: Mustard Ketchup Relish <select class=\"selectpicker show-tick\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select>","title":"Checkmark on selected option"},{"location":"examples/#menu-arrow-deprecated","text":"The Bootstrap menu arrow can be added with the show-menu-arrow class: Note: This feature has been deprecated and will be removed in v2.0.0. Mustard Ketchup Relish <select class=\"selectpicker show-menu-arrow\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select>","title":"Menu arrow (deprecated)"},{"location":"examples/#style-individual-options","text":"Classes and styles added to options are transferred to the select box: Mustard Ketchup Relish <select class=\"selectpicker\"> <option>Mustard</option> <option class=\"special\">Ketchup</option> <option style=\"background: #5cb85c; color: #fff;\">Relish</option> </select> .special { font-weight: bold !important; color: #fff !important; background: #bc0000 !important; text-transform: uppercase; }","title":"Style individual options"},{"location":"examples/#width","text":"Wrap selects in grid columns, or any custom parent element, to easily enforce desired widths. Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish Mustard Ketchup Relish <div class=\"row\"> <div class=\"col-sm-3\"> <div class=\"form-group\"> <select class=\"selectpicker form-control\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select> </div> </div> </div> Alternatively, use the data-width attribute to set the width of the select. Set data-width to 'auto' to automatically adjust the width of the select to its widest option. 'fit' automatically adjusts the width of the select to the width of its currently selected option. An exact value can also be specified, e.g., 300px or 50% . width: 'auto' Mustard Ketchup Relish All of the above (and much, much more!) width: 'fit' Mustard Ketchup Relish All of the above (and much, much more!) width: '150px' Mustard Ketchup Relish All of the above (and much, much more!) width: '75%' Mustard Ketchup Relish All of the above (and much, much more!) <select class=\"selectpicker\" data-width=\"auto\"> ... </select> <select class=\"selectpicker\" data-width=\"fit\"> ... </select> <select class=\"selectpicker\" data-width=\"100px\"> ... </select> <select class=\"selectpicker\" data-width=\"75%\"> ... </select>","title":"Width"},{"location":"examples/#customize-options","text":"","title":"Customize options"},{"location":"examples/#icons","text":"Add an icon to an option or optgroup with the data-icon attribute: Note: Glyphicons are not included in Bootstrap 4. To use FontAwesome, or another icon library, you'll need to set iconBase to something other than 'glyphicon' . Mustard Ketchup Relish Mayonnaise Barbecue Sauce <select class=\"selectpicker\"> <option data-icon=\"fa-heart\">Ketchup</option> </select>","title":"Icons"},{"location":"examples/#custom-content","text":"Insert custom HTML into the option with the data-content attribute: Note: This feature inserts HTML into the DOM. By default, it is sanitized using our built-in sanitizer . Mustard Ketchup Relish Mayonnaise <select class=\"selectpicker\"> <option data-content=\"<span class='badge badge-success'>Relish</span>\">Relish</option> </select>","title":"Custom content"},{"location":"examples/#subtext","text":"Add subtext to an option or optgroup with the data-subtext attribute: Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa With showSubtext set to true. <select class=\"selectpicker\" data-size=\"5\"> <option data-subtext=\"Heinz\">Ketchup</option> </select>","title":"Subtext"},{"location":"examples/#customize-menu","text":"","title":"Customize menu"},{"location":"examples/#menu-size","text":"The size option is set to 'auto' by default. When size is set to 'auto' , the menu always opens up to show as many items as the window will allow without being cut off. Set size to false to always show all items. The size of the menu can also be specifed using the data-size attribute. Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa Specify a number for data-size to choose the maximum number of items to show in the menu. Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa <select class=\"selectpicker\" data-size=\"5\"> ... </select>","title":"Menu size"},{"location":"examples/#selectdeselect-all-options","text":"Adds two buttons to the top of the menu - Select All & Deselect All with data-actions-box=\"true\" . Mustard Ketchup Relish <select class=\"selectpicker\" multiple data-actions-box=\"true\"> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select>","title":"Select/deselect all options"},{"location":"examples/#divider","text":"Add data-divider=\"true\" to an option to turn it into a divider. Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa <select class=\"selectpicker\" data-size=\"5\"> <option data-divider=\"true\"></option> </select>","title":"Divider"},{"location":"examples/#menu-header","text":"Add a header to the dropdown menu, e.g. header: 'Select a condiment' or data-header=\"Select a condiment\" Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa <select class=\"selectpicker\" data-header=\"Select a condiment\"> ... </select>","title":"Menu header"},{"location":"examples/#container","text":"Append the select menu to a specific element, e.g. container: 'body' or data-container=\".main-content\" . This is useful if the select element is inside an element with overflow: hidden . container: false Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa container: 'body' Mustard Ketchup Relish Mayonnaise Barbecue Sauce Salad Dressing Tabasco Salsa <div style=\"overflow:hidden;\"> <select class=\"selectpicker\"> ... </select> <select class=\"selectpicker\" data-container=\"body\"> ... </select> </div>","title":"Container"},{"location":"examples/#dropup-menu","text":"dropupAuto is set to true by default, which automatically determines whether or not the menu should display above or below the select box. If dropupAuto is set to false, manually make the select a dropup menu by adding the .dropup class to the select. Mustard Ketchup Relish <select class=\"selectpicker dropup\" data-dropup-auto=\"false\"> ... </select>","title":"Dropup menu"},{"location":"examples/#disabled","text":"","title":"Disabled"},{"location":"examples/#disabled-select-box","text":"Mustard Ketchup Relish <select class=\"selectpicker\" disabled> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </select>","title":"Disabled select box"},{"location":"examples/#disabled-options","text":"Mustard Ketchup Relish <select class=\"selectpicker\"> <option>Mustard</option> <option disabled>Ketchup</option> <option>Relish</option> </select>","title":"Disabled options"},{"location":"examples/#disabled-option-groups","text":"Mustard Ketchup Relish Tent Flashlight Toilet Paper <select class=\"selectpicker test\"> <optgroup label=\"Picnic\" disabled> <option>Mustard</option> <option>Ketchup</option> <option>Relish</option> </optgroup> <optgroup label=\"Camping\"> <option>Tent</option> <option>Flashlight</option> <option>Toilet Paper</option> </optgroup> </select>","title":"Disabled option groups"},{"location":"methods/","text":"Methods Interface with bootstrap-select. .selectpicker('val') You can set the selected value by calling the val method on the element. $('.selectpicker').selectpicker('val', 'Mustard'); $('.selectpicker').selectpicker('val', ['Mustard','Relish']); This is different to calling val() directly on the select element. If you call val() on the element directly, the bootstrap-select ui will not refresh (as the change event only fires from user interaction). You will have to call the ui refresh method yourself. $('.selectpicker').val('Mustard'); $('.selectpicker').selectpicker('render'); // this is the equivalent of the above $('.selectpicker').selectpicker('val', 'Mustard'); .selectpicker('selectAll') This will select all items in a multi-select. $('.selectpicker').selectpicker('selectAll'); .selectpicker('deselectAll') This will deselect all items in a multi-select. $('.selectpicker').selectpicker('deselectAll'); .selectpicker('render') You can force a re-render of the bootstrap-select ui with the render method. This is useful if you programatically change any underlying values that affect the layout of the element. $('.selectpicker').selectpicker('render'); .selectpicker('mobile') Enable mobile scrolling by calling $('.selectpicker').selectpicker('mobile') . This enables the device's native menu for select menus. The method for detecting the browser is left up to the user. if( /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ) { $('.selectpicker').selectpicker('mobile'); } .selectpicker('setStyle') Modify the class(es) associated with either the button itself or its container. If changing the class on the container: $('.selectpicker').addClass('col-lg-12').selectpicker('setStyle'); If changing the class(es) on the button (altering data-style): // Replace Class $('.selectpicker').selectpicker('setStyle', 'btn-danger'); // Add Class $('.selectpicker').selectpicker('setStyle', 'btn-large', 'add'); // Remove Class $('.selectpicker').selectpicker('setStyle', 'btn-large', 'remove'); .selectpicker('refresh') To programmatically update a select with JavaScript, first manipulate the select, then use the refresh method to update the UI to match the new state. This is necessary when removing or adding options, or when disabling/enabling a select via JavaScript. $('.selectpicker').selectpicker('refresh'); Mustard Ketchup Relish Remove Mustard Remove Ketchup Remove Relish <select class=\"selectpicker remove-example\"> <option value=\"Mustard\">Mustard</option> <option value=\"Ketchup\">Ketchup</option> <option value=\"Relish\">Relish</option> </select> <button class=\"btn btn-warning rm-mustard\">Remove Mustard</button> <button class=\"btn btn-danger rm-ketchup\">Remove Ketchup</button> <button class=\"btn btn-success rm-relish\">Remove Relish</button> $('.rm-mustard').click(function () { $('.remove-example').find('[value=Mustard]').remove(); $('.remove-example').selectpicker('refresh'); }); Mustard Ketchup Relish Disable Enable $('.ex-disable').click(function () { $('.disable-example').prop('disabled', true); $('.disable-example').selectpicker('refresh'); }); $('.ex-enable').click(function () { $('.disable-example').prop('disabled', false); $('.disable-example').selectpicker('refresh'); }); window.onload = function () { var $re = $('.remove-example'), $de = $('.disable-example'); $('.rm-mustard').click(function () { $re.find('[value=Mustard]').remove(); $re.selectpicker('refresh'); }); $('.rm-ketchup').click(function () { $re.find('[value=Ketchup]').remove(); $re.selectpicker('refresh'); }); $('.rm-relish').click(function () { $re.find('[value=Relish]').remove(); $re.selectpicker('refresh'); }); $('.ex-disable').click(function () { $de.prop('disabled', true); $de.selectpicker('refresh'); }); $('.ex-enable').click(function () { $de.prop('disabled', false); $de.selectpicker('refresh'); }); }; .selectpicker('toggle') Programmatically toggles the bootstrap-select menu open/closed. $('.selectpicker').selectpicker('toggle'); .selectpicker('hide') To programmatically hide the bootstrap-select use the hide method (this only affects the visibility of the bootstrap-select itself). $('.selectpicker').selectpicker('hide'); .selectpicker('show') To programmatically show the bootstrap-select use the show method (this only affects the visibility of the bootstrap-select itself). $('.selectpicker').selectpicker('show'); .selectpicker('destroy') To programmatically destroy the bootstrap-select, use the destroy method. $('.selectpicker').selectpicker('destroy');","title":"Methods"},{"location":"methods/#methods","text":"Interface with bootstrap-select.","title":"Methods"},{"location":"methods/#selectpickerval","text":"You can set the selected value by calling the val method on the element. $('.selectpicker').selectpicker('val', 'Mustard'); $('.selectpicker').selectpicker('val', ['Mustard','Relish']); This is different to calling val() directly on the select element. If you call val() on the element directly, the bootstrap-select ui will not refresh (as the change event only fires from user interaction). You will have to call the ui refresh method yourself. $('.selectpicker').val('Mustard'); $('.selectpicker').selectpicker('render'); // this is the equivalent of the above $('.selectpicker').selectpicker('val', 'Mustard');","title":".selectpicker('val')"},{"location":"methods/#selectpickerselectall","text":"This will select all items in a multi-select. $('.selectpicker').selectpicker('selectAll');","title":".selectpicker('selectAll')"},{"location":"methods/#selectpickerdeselectall","text":"This will deselect all items in a multi-select. $('.selectpicker').selectpicker('deselectAll');","title":".selectpicker('deselectAll')"},{"location":"methods/#selectpickerrender","text":"You can force a re-render of the bootstrap-select ui with the render method. This is useful if you programatically change any underlying values that affect the layout of the element. $('.selectpicker').selectpicker('render');","title":".selectpicker('render')"},{"location":"methods/#selectpickermobile","text":"Enable mobile scrolling by calling $('.selectpicker').selectpicker('mobile') . This enables the device's native menu for select menus. The method for detecting the browser is left up to the user. if( /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ) { $('.selectpicker').selectpicker('mobile'); }","title":".selectpicker('mobile')"},{"location":"methods/#selectpickersetstyle","text":"Modify the class(es) associated with either the button itself or its container. If changing the class on the container: $('.selectpicker').addClass('col-lg-12').selectpicker('setStyle'); If changing the class(es) on the button (altering data-style): // Replace Class $('.selectpicker').selectpicker('setStyle', 'btn-danger'); // Add Class $('.selectpicker').selectpicker('setStyle', 'btn-large', 'add'); // Remove Class $('.selectpicker').selectpicker('setStyle', 'btn-large', 'remove');","title":".selectpicker('setStyle')"},{"location":"methods/#selectpickerrefresh","text":"To programmatically update a select with JavaScript, first manipulate the select, then use the refresh method to update the UI to match the new state. This is necessary when removing or adding options, or when disabling/enabling a select via JavaScript. $('.selectpicker').selectpicker('refresh'); Mustard Ketchup Relish Remove Mustard Remove Ketchup Remove Relish <select class=\"selectpicker remove-example\"> <option value=\"Mustard\">Mustard</option> <option value=\"Ketchup\">Ketchup</option> <option value=\"Relish\">Relish</option> </select> <button class=\"btn btn-warning rm-mustard\">Remove Mustard</button> <button class=\"btn btn-danger rm-ketchup\">Remove Ketchup</button> <button class=\"btn btn-success rm-relish\">Remove Relish</button> $('.rm-mustard').click(function () { $('.remove-example').find('[value=Mustard]').remove(); $('.remove-example').selectpicker('refresh'); }); Mustard Ketchup Relish Disable Enable $('.ex-disable').click(function () { $('.disable-example').prop('disabled', true); $('.disable-example').selectpicker('refresh'); }); $('.ex-enable').click(function () { $('.disable-example').prop('disabled', false); $('.disable-example').selectpicker('refresh'); }); window.onload = function () { var $re = $('.remove-example'), $de = $('.disable-example'); $('.rm-mustard').click(function () { $re.find('[value=Mustard]').remove(); $re.selectpicker('refresh'); }); $('.rm-ketchup').click(function () { $re.find('[value=Ketchup]').remove(); $re.selectpicker('refresh'); }); $('.rm-relish').click(function () { $re.find('[value=Relish]').remove(); $re.selectpicker('refresh'); }); $('.ex-disable').click(function () { $de.prop('disabled', true); $de.selectpicker('refresh'); }); $('.ex-enable').click(function () { $de.prop('disabled', false); $de.selectpicker('refresh'); }); };","title":".selectpicker('refresh')"},{"location":"methods/#selectpickertoggle","text":"Programmatically toggles the bootstrap-select menu open/closed. $('.selectpicker').selectpicker('toggle');","title":".selectpicker('toggle')"},{"location":"methods/#selectpickerhide","text":"To programmatically hide the bootstrap-select use the hide method (this only affects the visibility of the bootstrap-select itself). $('.selectpicker').selectpicker('hide');","title":".selectpicker('hide')"},{"location":"methods/#selectpickershow","text":"To programmatically show the bootstrap-select use the show method (this only affects the visibility of the bootstrap-select itself). $('.selectpicker').selectpicker('show');","title":".selectpicker('show')"},{"location":"methods/#selectpickerdestroy","text":"To programmatically destroy the bootstrap-select, use the destroy method. $('.selectpicker').selectpicker('destroy');","title":".selectpicker('destroy')"},{"location":"options/","text":"Bootstrap version Because there are some changes in class names and layout between Bootstrap 3 and Bootstrap 4, bootstrap-select needs to know the version of Bootstrap you are using. By default, bootstrap-select automatically detects the version of Bootstrap. However, there are some instances where the version detection does not work properly (e.g. Bootstrap is being loaded asynchronously or there is a namespace collision). For now, bootstrap-select defaults to using Bootstrap 3 formatting if version detection fails. This will be changed in the next major release. You can manually specify Bootstrap's version via bootstrap-select's Constructor.BootstrapVersion object: $.fn.selectpicker.Constructor.BootstrapVersion = '4'; Core options Options can be passed via data attributes or JavaScript. For data attributes, append the option name to data- , as in data-style=\"\" or data-selected-text-format=\"count\" . Note: For security reasons, the sanitize , sanitizeFn and whiteList options cannot be supplied using data attributes. Name Type Default Description actionsBox boolean false When set to true , adds two buttons to the top of the dropdown menu ( Select All & Deselect All ). container string | false false When set to a string, appends the select to a specific element or selector, e.g., container: 'body' | '.main-body' countSelectedText string | function function Sets the format for the text displayed when selectedTextFormat is count or count > # . {0} is the selected amount. {1} is total available for selection. When set to a function, the first parameter is the number of selected options, and the second is the total number of options. The function must return a string. deselectAllText string 'Deselect All' The text on the button that deselects all options when actionsBox is enabled. dropdownAlignRight boolean | 'auto' false Align the menu to the right instead of the left. If set to 'auto' , the menu will automatically align right if there isn't room for the menu's full width when aligned to the left. dropupAuto boolean true checks to see which has more room, above or below. If the dropup has enough room to fully open normally, but there is more room above, the dropup still opens normally. Otherwise, it becomes a dropup. If dropupAuto is set to false, dropups must be called manually. header string false adds a header to the top of the menu; includes a close button by default hideDisabled boolean false removes disabled options and optgroups from the menu data-hide-disabled: true iconBase string 'glyphicon' Set the base to use a different icon font instead of Glyphicons. If changing iconBase, you might also want to change tickIcon , in case the new icon font uses a different naming scheme. liveSearch boolean false When set to true , adds a search box to the top of the selectpicker dropdown. liveSearchNormalize boolean false Setting liveSearchNormalize to true allows for accent-insensitive searching. liveSearchPlaceholder string null When set to a string, a placeholder attribute equal to the string will be added to the liveSearch input. liveSearchStyle string 'contains' When set to 'contains' , searching will reveal options that contain the searched text. For example, searching for pl with return both Ap pl e, Pl um, and Pl antain. When set to 'startsWith' , searching for pl will return only Pl um and Pl antain. maxOptions integer | false false When set to an integer and in a multi-select, the number of selected options cannot exceed the given value. This option can also exist as a data-attribute for an <optgroup> , in which case it only applies to that <optgroup> . maxOptionsText string | array | function function The text that is displayed when maxOptions is enabled and the maximum number of options for the given scenario have been selected. If a function is used, it must return an array. array[0] is the text used when maxOptions is applied to the entire select element. array[1] is the text used when maxOptions is used on an optgroup. If a string is used, the same text is used for both the element and the optgroup. mobile boolean false When set to true , enables the device's native menu for select menus. multipleSeparator string ', ' Set the character displayed in the button that separates selected options. noneSelectedText string 'Nothing selected' The text that is displayed when a multiple select has no selected options. noneResultsText string 'No results matched {0}' The text displayed when a search doesn't return any results. selectAllText string 'Select All' The text on the button that selects all options when actionsBox is enabled. selectedTextFormat 'values' | 'static' | 'count' | 'count > x' (where x is an integer) 'values' Specifies how the selection is displayed with a multiple select. 'values' displays a list of the selected options (separated by multipleSeparator . 'static' simply displays the select element's title. 'count' displays the total number of selected options. 'count > x' behaves like 'values' until the number of selected options is greater than x; after that, it behaves like 'count' . selectOnTab boolean false When set to true , treats the tab character like the enter or space characters within the selectpicker dropdown. showContent boolean true When set to true , display custom HTML associated with selected option(s) in the button. When set to false , the option value will be displayed instead. showIcon boolean true When set to true , display icon(s) associated with selected option(s) in the button. showSubtext boolean false When set to true , display subtext associated with a selected option in the button. showTick boolean false Show checkmark on selected option (for items without multiple attribute). size 'auto' | integer | false 'auto' When set to 'auto' , the menu always opens up to show as many items as the window will allow without being cut off. When set to an integer, the menu will show the given number of items, even if the dropdown is cut off. When set to false , the menu will always show all items. style string | null Bootstrap 4: 'btn-light' Bootstrap 3: 'btn-default' When set to a string, add the value to the button's style. styleBase string | null 'btn' The default class applied to the button. When using the setStyle method, this class will always remain. Hint: If you want to style the element as a form control, set style to '' and styleBase to 'form-control' . tickIcon string 'glyphicon-ok' Set which icon to use to display as the \"tick\" next to selected options. title string | null null The default title for the selectpicker. virtualScroll boolean | integer 600 If enabled, the items in the dropdown will be rendered using virtualization (i.e. only the items that are within the viewport will be rendered). This drastically improves performance for selects with a large number of options. Set to an integer to only use virtualization if the select has at least that number of options. width 'auto' | 'fit' | css-width | false (where css-width is a CSS width with units, e.g. 100px ) false When set to auto , the width of the selectpicker is automatically adjusted to accommodate the widest option. When set to a css-width, the width of the selectpicker is forced inline to the given value. When set to false , all width information is removed. windowPadding integer | array 0 This is useful in cases where the window has areas that the dropdown menu should not cover - for instance a fixed header. When set to an integer, the same padding will be added to all sides. Alternatively, an array of integers can be used in the format [top, right, bottom, left] . sanitize boolean true Enable or disable the sanitization. If activated, 'data-content' on individual options will be sanitized. whiteList object Default value Object which contains allowed attributes and tags sanitizeFn null | function null Here you can supply your own sanitize function. This can be useful if you prefer to use a dedicated library to perform sanitization. Default settings You can change the default settings for bootstrap-select by modifying its Constructor.DEFAULTS object: $.fn.selectpicker.Constructor.DEFAULTS.multipleSeparator = ' | '; Events Bootstrap-select exposes a few events for hooking into select functionality. hide.bs.select, hidden.bs.select, show.bs.select, and shown.bs.select all have a relatedTarget property, whose value is the toggling anchor element. Event Type Description show.bs.select This event fires immediately when the show instance method is called. shown.bs.select This event is fired when the dropdown has been made visible to the user (will wait for CSS transitions, to complete). hide.bs.select This event is fired immediately when the hide instance method has been called. hidden.bs.select This event is fired when the dropdown has finished being hidden from the user (will wait for CSS transitions, to complete). loaded.bs.select This event fires after the select has been initialized. rendered.bs.select This event fires after the render instance has been called. refreshed.bs.select This event fires after the refresh instance has been called. changed.bs.select This event fires after the select's value has been changed. It passes through event , clickedIndex , isSelected , previousValue . previousValue is the value of the select prior to being changed. If the select's value has been changed either via the .selectpicker('val') , .selectpicker('selectAll') , or .selectpicker('deselectAll') methods, clickedIndex and isSelected will be null . $('#mySelect').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) { // do something... }); Sanitizer HTML added via the data-content attribute on individual options is sanitized using our built-in sanitizer. The default whiteList value is the following: var ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i; var DefaultWhitelist = { // Global attributes allowed on any supplied element below. '*': ['class', 'dir', 'id', 'lang', 'role', 'tabindex', 'style', ARIA_ATTRIBUTE_PATTERN], a: ['target', 'href', 'title', 'rel'], area: [], b: [], br: [], col: [], code: [], div: [], em: [], hr: [], h1: [], h2: [], h3: [], h4: [], h5: [], h6: [], i: [], img: ['src', 'alt', 'title', 'width', 'height'], li: [], ol: [], p: [], pre: [], s: [], small: [], span: [], sub: [], sup: [], strong: [], u: [], ul: [] } If you want to add new values to this default whiteList you can do the following: var myDefaultWhiteList = $.fn.selectpicker.Constructor.DEFAULTS.whiteList; // To allow table elements myDefaultWhiteList.table = []; // To allow td elements and data-option attributes on td elements myDefaultWhiteList.td = ['data-option']; // You can push your custom regex to validate your attributes. // Be careful about your regular expressions being too lax var myCustomRegex = /^data-my-app-[\\w-]+/; myDefaultWhiteList['*'].push(myCustomRegex); If you want to bypass our sanitizer because you prefer to use a dedicated library, you should do the following: $('#yourSelect').selectpicker({ sanitizeFn: function (domNodes) { return DOMPurify.sanitize(domNodes) } }); For performance reasons, our built-in sanitizer accepts an array of DOM nodes as its first argument, rather than an HTML string. Keep that in mind if deciding to use your own sanitizeFn .","title":"Options"},{"location":"options/#bootstrap-version","text":"Because there are some changes in class names and layout between Bootstrap 3 and Bootstrap 4, bootstrap-select needs to know the version of Bootstrap you are using. By default, bootstrap-select automatically detects the version of Bootstrap. However, there are some instances where the version detection does not work properly (e.g. Bootstrap is being loaded asynchronously or there is a namespace collision). For now, bootstrap-select defaults to using Bootstrap 3 formatting if version detection fails. This will be changed in the next major release. You can manually specify Bootstrap's version via bootstrap-select's Constructor.BootstrapVersion object: $.fn.selectpicker.Constructor.BootstrapVersion = '4';","title":"Bootstrap version"},{"location":"options/#core-options","text":"Options can be passed via data attributes or JavaScript. For data attributes, append the option name to data- , as in data-style=\"\" or data-selected-text-format=\"count\" . Note: For security reasons, the sanitize , sanitizeFn and whiteList options cannot be supplied using data attributes. Name Type Default Description actionsBox boolean false When set to true , adds two buttons to the top of the dropdown menu ( Select All & Deselect All ). container string | false false When set to a string, appends the select to a specific element or selector, e.g., container: 'body' | '.main-body' countSelectedText string | function function Sets the format for the text displayed when selectedTextFormat is count or count > # . {0} is the selected amount. {1} is total available for selection. When set to a function, the first parameter is the number of selected options, and the second is the total number of options. The function must return a string. deselectAllText string 'Deselect All' The text on the button that deselects all options when actionsBox is enabled. dropdownAlignRight boolean | 'auto' false Align the menu to the right instead of the left. If set to 'auto' , the menu will automatically align right if there isn't room for the menu's full width when aligned to the left. dropupAuto boolean true checks to see which has more room, above or below. If the dropup has enough room to fully open normally, but there is more room above, the dropup still opens normally. Otherwise, it becomes a dropup. If dropupAuto is set to false, dropups must be called manually. header string false adds a header to the top of the menu; includes a close button by default hideDisabled boolean false removes disabled options and optgroups from the menu data-hide-disabled: true iconBase string 'glyphicon' Set the base to use a different icon font instead of Glyphicons. If changing iconBase, you might also want to change tickIcon , in case the new icon font uses a different naming scheme. liveSearch boolean false When set to true , adds a search box to the top of the selectpicker dropdown. liveSearchNormalize boolean false Setting liveSearchNormalize to true allows for accent-insensitive searching. liveSearchPlaceholder string null When set to a string, a placeholder attribute equal to the string will be added to the liveSearch input. liveSearchStyle string 'contains' When set to 'contains' , searching will reveal options that contain the searched text. For example, searching for pl with return both Ap pl e, Pl um, and Pl antain. When set to 'startsWith' , searching for pl will return only Pl um and Pl antain. maxOptions integer | false false When set to an integer and in a multi-select, the number of selected options cannot exceed the given value. This option can also exist as a data-attribute for an <optgroup> , in which case it only applies to that <optgroup> . maxOptionsText string | array | function function The text that is displayed when maxOptions is enabled and the maximum number of options for the given scenario have been selected. If a function is used, it must return an array. array[0] is the text used when maxOptions is applied to the entire select element. array[1] is the text used when maxOptions is used on an optgroup. If a string is used, the same text is used for both the element and the optgroup. mobile boolean false When set to true , enables the device's native menu for select menus. multipleSeparator string ', ' Set the character displayed in the button that separates selected options. noneSelectedText string 'Nothing selected' The text that is displayed when a multiple select has no selected options. noneResultsText string 'No results matched {0}' The text displayed when a search doesn't return any results. selectAllText string 'Select All' The text on the button that selects all options when actionsBox is enabled. selectedTextFormat 'values' | 'static' | 'count' | 'count > x' (where x is an integer) 'values' Specifies how the selection is displayed with a multiple select. 'values' displays a list of the selected options (separated by multipleSeparator . 'static' simply displays the select element's title. 'count' displays the total number of selected options. 'count > x' behaves like 'values' until the number of selected options is greater than x; after that, it behaves like 'count' . selectOnTab boolean false When set to true , treats the tab character like the enter or space characters within the selectpicker dropdown. showContent boolean true When set to true , display custom HTML associated with selected option(s) in the button. When set to false , the option value will be displayed instead. showIcon boolean true When set to true , display icon(s) associated with selected option(s) in the button. showSubtext boolean false When set to true , display subtext associated with a selected option in the button. showTick boolean false Show checkmark on selected option (for items without multiple attribute). size 'auto' | integer | false 'auto' When set to 'auto' , the menu always opens up to show as many items as the window will allow without being cut off. When set to an integer, the menu will show the given number of items, even if the dropdown is cut off. When set to false , the menu will always show all items. style string | null Bootstrap 4: 'btn-light' Bootstrap 3: 'btn-default' When set to a string, add the value to the button's style. styleBase string | null 'btn' The default class applied to the button. When using the setStyle method, this class will always remain. Hint: If you want to style the element as a form control, set style to '' and styleBase to 'form-control' . tickIcon string 'glyphicon-ok' Set which icon to use to display as the \"tick\" next to selected options. title string | null null The default title for the selectpicker. virtualScroll boolean | integer 600 If enabled, the items in the dropdown will be rendered using virtualization (i.e. only the items that are within the viewport will be rendered). This drastically improves performance for selects with a large number of options. Set to an integer to only use virtualization if the select has at least that number of options. width 'auto' | 'fit' | css-width | false (where css-width is a CSS width with units, e.g. 100px ) false When set to auto , the width of the selectpicker is automatically adjusted to accommodate the widest option. When set to a css-width, the width of the selectpicker is forced inline to the given value. When set to false , all width information is removed. windowPadding integer | array 0 This is useful in cases where the window has areas that the dropdown menu should not cover - for instance a fixed header. When set to an integer, the same padding will be added to all sides. Alternatively, an array of integers can be used in the format [top, right, bottom, left] . sanitize boolean true Enable or disable the sanitization. If activated, 'data-content' on individual options will be sanitized. whiteList object Default value Object which contains allowed attributes and tags sanitizeFn null | function null Here you can supply your own sanitize function. This can be useful if you prefer to use a dedicated library to perform sanitization.","title":"Core options"},{"location":"options/#default-settings","text":"You can change the default settings for bootstrap-select by modifying its Constructor.DEFAULTS object: $.fn.selectpicker.Constructor.DEFAULTS.multipleSeparator = ' | ';","title":"Default settings"},{"location":"options/#events","text":"Bootstrap-select exposes a few events for hooking into select functionality. hide.bs.select, hidden.bs.select, show.bs.select, and shown.bs.select all have a relatedTarget property, whose value is the toggling anchor element. Event Type Description show.bs.select This event fires immediately when the show instance method is called. shown.bs.select This event is fired when the dropdown has been made visible to the user (will wait for CSS transitions, to complete). hide.bs.select This event is fired immediately when the hide instance method has been called. hidden.bs.select This event is fired when the dropdown has finished being hidden from the user (will wait for CSS transitions, to complete). loaded.bs.select This event fires after the select has been initialized. rendered.bs.select This event fires after the render instance has been called. refreshed.bs.select This event fires after the refresh instance has been called. changed.bs.select This event fires after the select's value has been changed. It passes through event , clickedIndex , isSelected , previousValue . previousValue is the value of the select prior to being changed. If the select's value has been changed either via the .selectpicker('val') , .selectpicker('selectAll') , or .selectpicker('deselectAll') methods, clickedIndex and isSelected will be null . $('#mySelect').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) { // do something... });","title":"Events"},{"location":"options/#sanitizer","text":"HTML added via the data-content attribute on individual options is sanitized using our built-in sanitizer. The default whiteList value is the following: var ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i; var DefaultWhitelist = { // Global attributes allowed on any supplied element below. '*': ['class', 'dir', 'id', 'lang', 'role', 'tabindex', 'style', ARIA_ATTRIBUTE_PATTERN], a: ['target', 'href', 'title', 'rel'], area: [], b: [], br: [], col: [], code: [], div: [], em: [], hr: [], h1: [], h2: [], h3: [], h4: [], h5: [], h6: [], i: [], img: ['src', 'alt', 'title', 'width', 'height'], li: [], ol: [], p: [], pre: [], s: [], small: [], span: [], sub: [], sup: [], strong: [], u: [], ul: [] } If you want to add new values to this default whiteList you can do the following: var myDefaultWhiteList = $.fn.selectpicker.Constructor.DEFAULTS.whiteList; // To allow table elements myDefaultWhiteList.table = []; // To allow td elements and data-option attributes on td elements myDefaultWhiteList.td = ['data-option']; // You can push your custom regex to validate your attributes. // Be careful about your regular expressions being too lax var myCustomRegex = /^data-my-app-[\\w-]+/; myDefaultWhiteList['*'].push(myCustomRegex); If you want to bypass our sanitizer because you prefer to use a dedicated library, you should do the following: $('#yourSelect').selectpicker({ sanitizeFn: function (domNodes) { return DOMPurify.sanitize(domNodes) } }); For performance reasons, our built-in sanitizer accepts an array of DOM nodes as its first argument, rather than an HTML string. Keep that in mind if deciding to use your own sanitizeFn .","title":"Sanitizer"}]}